24-08-29 목요일
DBCP(DataBase Connection Pool)
	DB 연결이 필요할 때마다 연결을 직접 한다면 코드가 복잡해지며
	많은 요청이 잇을 때 연결 속도가 저하될 수 있다. 
	따라서 미리 Connection 들을 만들어 두고
	필요시 저장된 공간에서 가져다 쓰고 다시 반납하는 기법이다.

JNDI(Java Naming and Directory Interface)
	DBCP를 이용하기 위한 서비스
	자바에서 Directory 서비스에 존재하는 무언가를 찾아서 자바 내의 객체로 불러오는 API
	디렉터리 서비스에서 제공하는 데이터 및 객체를 발견하고 참고하기 위한 자바 API이며
	외부에 존재하는 객체를 가져오기 위한 기술이다. 

	아래는 참고만
	ex. {boardnum = 10, }

	보통 xml 형태로 사용한다. 
	<bean>
		<class-name>BoardDTO</class-name>
		<fileds>
		</fileds>
	</bean>

MyBatis
	https://mybatis.org/mybatis-3/ko/getting-started.html

	DB를 쉽게 다룰 수 있도록 도와주는 오픈 소스 ORM 프레임워크
	모델(데이터와 대응)과 DB의 매개체 - ODM(Object Data Mapping)
	Java 소스코드 안에 SQL문을 작성하면 코드가 길어지고
	섞여 있기 때문에 유지보수 및 분업이 쉽지 않다.
	MyBatis는 기존 JDBC 방식과는 달리 SQL문을 XML 파일에 작성함으로써
	코드가 줄어들고 SQL문 수정이 편해진다.
	또한 DBCP를 사용하여 커넥션을 여러개 생성하여 보관하기 때문에
	JDBC만 사용하는 것보다 작업 효율과 가독성이 좋아진다.



----- 공부한 내용 ------
매번 setString으로 넘길 수 없으니, myBatis를 이용해
인터페이스를 만들고 
resources > mapper > namespace에 경로
메서드 이름과 동일한 id를 찾아서 실행


DBCP(DataBase Connection Pool)
DB와의 연결을 매번 새로 생성/종료하는 것은 비효율적이기 때문에 사용한다.
Apache Commons DBCP 라이브러리를 활용해서 DB 연결을 관리하는 기능을 제공한다.

JNDI(Java Naming and Directory Interface)
자바에서 네트워크 서비스를 이용하여 객체를 찾고 접근하는데 사용되는 API
주로 리소스(DB연결, EJB, JMS 등)를 이름을 통해 찾고 접근
- 네이밍 서비스 : 이름기반 객체 찾음. 네트워크상의 자원을 조회하고 사용
- 디렉토리 서비스 : 객체를 디렉토리 서비스에서 검색. 
- JNDI Context : 객체를 찾기 위해 Context 객체를 사용. 이름과 객체 간의 매핑을 관리

MyBatis
Java 애플리케이션에서 DB와의 상호작용을 효율적으로 관리하기 위한 ORM 프레임워크
SQL 쿼리를 XML파일 또는 애너테이션으로 정의하고, 이 쿼리와 자바 객체 간의 매핑을 관리

구성요소
1. Mapper Interface : SQL쿼리를 정의할 메서드를 선언. 이 인터페이스는 xml 매퍼 파일에 정의된 SQL쿼리와 매핑
2. xml 매퍼 파일 : SQL쿼리를 정의하는 파일. 메서드와 SQL쿼리를 연결하여 DB와 상호작용.
3. sqlSessionFactory : DB와의 상호작용을 위한 SqlSession 객체를 생성. SqlSessionFactory는 DB연결 정보돠 메퍼 파일의 위치를 설정
4. SqlSession : DB와의 세션을 관리하는 객체
5. Configuration : MyBatis 설정을 포함하는 객체. DB연결 정보, 매퍼 파일 위치, 트랜잭션 관리 등 설정

Application-properties > MyBatis 설정
mybatis.config-location=classpath:/mybatis-config.xml
mybatis.mapper-locations=classpath:/mapper/**/*.xml

> java는 camelcase, sql은 대소문자 구분이 없기 때문에 설정
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
 	<settings>
 		<setting name="mapUnderscoreToCamelCase" value="true" />
 	</settings>
</configuration>

> xml 매퍼 파일
위는 생략
<mapper namespace="com.example.demo.mapper.UserMapper"> // 자바 코드 경로를 나타낸다.
	<select id="getUsernameByUserid"> // 자바 메서드 이름을 찾는다.
		select username from test_user where userid = #{userid} // 파라미터를 SQL쿼리의 userid자리로 삽입한다. 매퍼 인터페이스에서 메서드 호출 시 전달된 인수로 대체된다.  
	</select>
</mapper>

> java > Mapper Interface
@Mapper // mybatis는 매퍼 인터페이스를 인식하고, 매핑되는 구현체를 생성한다. 
public interface TimeMapper {
	String getTime1();

	@Select("select now() from daul") // select 애너테이션을 이용해서 xml 파일에 작성하지 않고 바로 작성가능
	String getTime2();
}

@Mapper
public interface UserMapper {
	String getUsernameByUserid(String userid);
}

> 인터페이스 
@Controller
public class SampleController {

	@Autowired // spring 의존성 주입 애너테이션. spring 컨테이너가 인스턴스를 자동으로 주입한다. 
	TimeMapper mapper;
	@Autowired
	UserMapper mapper2;
	
	@GetMapping("time1")
	public void time1() {
		System.out.println("Test : " + mapper.getTime1());
	}

	@GetMapping("user1")
	public void user1() {
		System.out.println("Test : " + mapper2.getUsernameByUserid("apple")); // 매개변수를 넘겨주어 username을 조회한다.
	}
}

Mybatis ResultMap 공부해보기