24-08-21 수요일

서블릿(Servlet)
	자바를 사용하여 웹 페이지를 동적으로 생성하는 서버 프로그램
	자바 내에서 HTML 문서를 만들어낼 수 있는 프로그램
	클라이언트의 요청을 받기, 처리하기, 응답할 HTML 문서 만들기

	out.print("<html>");
	out.print("<input type=\"button\" class='a'>");
	
	-> 이렇게 완성된 HTML 문서를 만들어서 쓰기 힘드니까, 
	동적데이터를 JSP에 보내고 컨테이너에게 건내줌. 파싱해서 HTML 문서를 만드는 쪽으로 흘러가게 됨

웹 컨테이너(서블릿 컨테이너)
	(JSP를 해석하기 위한)
	동적인 데이터 연산, 요청이 들어왔을 때 웹 서버가 연산을 요청하는 곳
	연산이 끝나면 정제된 데이터(html, text, json, ...)로 서버에 돌려준다. 

jsp로 하느냐 서블릿으로 하느냐의 차이였던것

프레임 워크
	(일을 하기 위해 틀들이 짜여있음 -> 사용만 하면됨)
	뼈대나 근간을 이루는 코드들의 묶음
	개발자는 각 개개인의 능력 차이가 큰 직종이고, 개발자 구성에 따라 프로젝트 결과 역시
	큰 차이를 낳는다. 이런 상황을 극복하기 위한 코드의 결과물이 프레임 워크이다.
	프로그램의 기본 흐름이나 구조를 정해놓고 모든 팀원들이 이 구조에 자신의 코드를 추가하는 방식으로 개발하게 된다.
	
프레임 워크의 장점
	개발에 필요한 구조를 이미 코드로 만들어 놓았기 때문에, 
	실력이 부족한 개발자라 하더라도 반 쯤 완성된 상태에서 필요한 부분을 조립하는 형태의
	개발이 가능하다.
	회사 입장에서는 프레임워크를 사용하면 일정한 품질이 보장되는 결과물을 얻을 수 있고,
	개발자 입장에서는 완성된 구조에 자신이 맡은 코드를 개발해서 넣기 때문에
	비즈니스 로직에만 집중할 수 있고 개발 시간을 단축할 수 있다.

스프링 프레임워크
	경량 프레임워크(light-weight)
	나머지 자르파일을 추가하여 라이브러리 추가로 사용
	예전 프레임워크는 다양한 경우를 처리할 수 있는 다양한 기능을 가지도록
	만들다 보니 하나의 기능을 위해서 너무 많은 구조가 필요했다.
	기술이 너무나 복잡하고 방대했기 때문에 전체를 이해하고 개발하기에는 어려움이 많았다.
	그래서 스프링 프레임워크가 등장했고, 특정 기능을 위주로 간단한 JAR파일 등을 이용해서
	모든 개발이 가능하도록 구성되어 있다.

스프링 프레임워크(Spring Framework) VS 스프링 부트(Spring Boot)
	스프링 프레임워크
		설정 파일을 개발자가 직접 작성하여 스프링 컨테이너를 구성
		필요한 빈(Bean) 객체를 직접 등록, 의존성을 설정
		스프링 프레임워크를 보다 세밀하게 제어하고자 하는 경우에 사용
		(내가 필요하면 만들어서 사용할 수 있음)
	------------------------------------------------------
	스프링 부트
		스프링에서 제공하는 여러 기능들을 자동으로 설정하여 보다 쉽게 사용할 수 있음
		모니터링과 관리를 위한 기능을 제공하며 상태 모니터링 및 조치를 취하기 쉬움
		내장 톰켓 서버를 사용하여 쉽게 웹 어플리케이션을 실행할 수 있음
		개발자가 더더욱 개발에만 집중할 수 있도록 도와주는 프레임워크
	결론
		스프링은 프레임워크, 스프링 부트는 스프링프레임워크를 기반으로 한 도구
		스프링프레임워크를 세밀하게 제어하고 싶다 - 스프링 프레임워크
		빠르고 간단하게 스프링 어플리케이션을 개발하고 싶다 - 스프링 부트

STS(Spring Tool Suite) 설치
	https://spring.io/tools > jar파일 다운로드 > 설치할 곳으로 옮겨서 실행(주소 달라질 수 있으니)

Maven
	Maven은 프로젝트 관리 도구의 일종이다. Maven은 필요한 라이브러리를 특정 문서(pom.xml)에 정의해 놓으면
	내가 사용할 라이브러리 뿐만 아니라 해당 라이브러리가 작동하는데에 필요한 다른 라이브러리들 까지 관리하여 
	네트워크를 통해서 자동으로 다운 받아준다. 
	과거에는 Ant, 최근에는 Gradle 이라는 빌드 도구 사용(그래이들도 공부해보기)
	
	https://mvnrepository.com/ > 에서 필요한 라이브러리를 찾는다.

프로젝트 기본 구성 요소
	src/main/java		작성되는 코드들의 경로
	src/main/resource	서버, 클라이언트 사이드 자원들의 경로
	src/test/java		테스트 코드들을 넣는 경로

스프링 부트 라이브러리 세부 설정 파일
	src/main/resource/application.properties	db address etc...

Maven이 사용하는 pom.xml
	최상위경로/pom.xml

Postman(포스트맨)
	여러 방식의 요청을 외부에서 보낼 수 있도록 도와주는 개발 툴
	GET, POST 외에도 PUT, DELETE 등의 요청도 가능하다.
	https://www.postman.com/downloads/

템플릿 프로젝트의 	
	







----- 정리 ------
1. 
서블릿: 웹 서버에서 동적 컨텐츠를 생성하기 위한 자바 프로그램
JSP: HTML 내에 자바 코드를 삽입하여 웹 페이지를 동적으로 생성하는 기술

서블릿은 클라이언트의 요청을 받아 처리하고 결과를 다시 클라이언트에게 전송 역할
JSP는 서블릿 보다 쉽게 작성할 수 있게 하는 기술

서블릿: 클라이언트로부터 HTTP 요청을 받으면, 서블릿 컨테이너(Apache Tomcat)이 인식하고 
서블릿 객체를 생성하여 요청을 처리한다.
생명주기는 크게 초기화(서블릿초기화), 서비스, 소명의 세 단계로 구분된다. 
서블릿 컨테이너에서
	클라이언트로부터 요청이 들어오면 해당 서블릿의 init 메소드를 호출하여 서블릿을 초기화,
	이후 요청에 따라 service 메소드를 반복적으로 호출하여 요청 처리,
	마지막으로 서블릿 컨테이너가 종료되거나 서블릿이 더 이상 필요하지 않을 때 destroy메소드를 호출하여 리소스를 정리


porm.xml 에 dependency 추가
JSP parser : 우리가 만드는 JSP 파일을 해석하기 위한 해석기
JSP 내에서 사용할 jstl 라이브러리


2. 
localhost:8080
클라이언트가 로컬 컴퓨터에서 포트 8080에서 실행 중인 서버에 연결하려고 한다. 
웹서버나 애플리케이션 서버(예: Apache, Nginx)나 애플리케이션 서버(예: Tomcat)에 연결

localhost:8080/a
클라이언트가 get 방식으로 /a로 요청을 보낸다.

서버에서는 controller에서 요청을 받아, 요청이 왔을 때 호출이 되려면 RequestMapping("/a")
get 방식의 요청이면 GetMapping을 이용한다. 
return으로 "a";를 해주면
ViewResolver 가 /views/a.jsp 를 찾게 된다.

src에서 > main > webapp > views 폴더를 만들어 (file)a.jsp를 만들어준다.


application.properties에서 view 에 대한 설정을 해준다.
앞에 /views 를 찾아주고
뒤에 .jsp 를 찾는 설정
spring.mvc.view.prefix=/views/
spring.mvc.view.suffix=.jsp

/가 뜻하는 것은 webapp이라는 폴더

controller는 mapping에 따라서 


controller에 요청을 해서 view를 찾아서 응답하는 과정까지 


3. 
모든건 get 방식으로 
링크 이동
url 주소에 쿼리스트링으로 넣거나
등등 브라우저를 이용해서 테스트가 가능하다

post 방식으로 테스트 하려면
form을 이용해야함. 그렇다는 건 ul 화면이 필요함. 그래서 postman을 사용하는 건가??! 응 그렇다
