24-09-02 화요일
스프링 MVC 프로젝트의 기본 구성
	스프링 MVC에서 어떤 단계를 거쳐서 실행되는지 이해해야 
	문제 발생 시 빠른 대처와 대안을 찾을 수 있다.
	웹 프로젝트는 3-tier(티어) 방식으로 구성한다.
	
	Data ↔ Application ↔ Presentation

Data Tier(데이터 계층)
	데이터를 보관하고 사용하는 방법에 대해 설계가 들어가는 계층
	영속 계층, 백엔드 라고도 부른다.
	데이터베이스와 데이터베이스에 접근하여 데이터를 읽고 쓰는 것을 관리하는 방법들이 포함되어 있다.
	일반적으로는 DB를 많이 이용하지만, 상황에 따라서는 네트워크 호출, 원격 호출 등의 기술이 접목된다. 
	DB 서버가 담당하는 영역

Application Tier(어플리케이션 계층)
	요청되는 정보를 처리하고 가공하는 계층
	미들웨어, 백엔드 라고도 부른다.
	비즈니스 로직 계층이라고도 하며 동적인 데이터들을 제공하기 위한
	순수한 비즈니스 로직이 포함되어 있다.
	JAVA를 포함한 WAS 서버가 담당하는 영역

Presentation Tier(화면 계층)
	사용자와 직접적으로 소통하는 계층
	프론트엔드 라고도 부른다.
	사용자의 응답 처리를 진행하고, 화면을 표현하는 방법들이 포함되어 있다. 
	HTML 엔진(Thymeleaf), 웹 서버가 담당하는 영역

[결론]
	각 영역은 독립적으로 설계되어 나중에 특정한 기술이 변하더라도 필요한 부분을
	전자제품의 부품처럼 쉽게 교환할 수 있게 하자는 방식이다. 각 계층의 연결 부위는
	인터페이스를 이용하여 설계하는 것이 일반적인 구성 방식이다.

프로젝트 생성
	Developer Tools
		Spring Boot Devtools(서버 자동 재시작)
	Messaging
		WebSocket(채팅을 위한 웹 소켓)
	SQL
		MyBatis Framework
		MySQL Driver
	Template Engines
		Thymeleaf(JSP 대신 사용한 템플릿 엔진 - SSR)
	Web
		Spring Web(RESTful, Spring MVC, 내장 톰켓, ..)

명명 규칙(Naming Convention)
	패키지명 : 최상위도메인명.그룹명.프로젝트명
		ex) com.example.demo

	요소별 명명
		config		프로젝트와 관련된 설정 클래스들의 보관 패키지
		controller 	스프링 MVC의 Controller들의 보관 패키지
		service		스프링의 Service 인터페이스와 구현 클래스 패키지
		domain		DTO들의 보관 패키지
		model		DAO, DTO 클래스들의 패키지
		mapper		MyBatis의 Mapper 인터페이스들의 패키지
		repository	레포지토리 패턴 이용 시 레포지토리들의 패키지
		exception	웹 관련 예외 처리 클래스들의 보관 패키지 - 자바 관점에서 했다면 exception (상황에따라 있을수도 없을수도)
		aop		스프링의 aop 관련 패키지
		security	Spring Security 관련 패키지
		util		각종 유틸리티 클래스 관련 패키지(ex. 정렬 알고리즘 or 자료구조)




흐름 파악하기
1. DB 설계
2. Mapper 부터 만들자
	@Mapper 인터페이스에서 namespace로 user.xml 파일에서 id로 찾아 쿼리문 수행 > DB 접근
3. mapper 테스트로 쿼리문 확인 @MyBatisTest
	데이터 로직 구성 완성 > 활용해서 기능 만들기(비즈니스 로직 구현 차례)
4. 인터페이스 서비스 - 상속받아서 실제로 구현한 서비스 클래스를 여러개 만들 수 있어. 
	설계용으로 기능들을 정의해 놓으면 된다.
	매개변수 넘겨서 서비스 구현
	ex. boolean join(UserDTO user); 
	타입은 굳이 boolean으로 안해도 된다. 개발자 나름.

		인터페이스 서비스
		공통기능을 넣음
		ex. join/login/checkId/leaveId
		↓	↓
	클래스 서비스	클래스 서비스
	ex. 개인		법인
	각각 필요한 기능들 추가해서 넣음

	매개변수를 받아서 mapper로 DB에 잘 들어가 있는지 확인해서 boolean 타입으로 return 해줌
5. 서비스 테스트
6. controller 
	API 명세서 작성해서 프론트에게 알려줌
	
	ex. 
	GET
	/user/join	회원가입 페이지로 이동
	/user/login	로그인 페이지로 이동(인덱스)
	/user/checkId	넘겨진 파라미터로 아이디 중복 체크
		parmas
		  userid	검사하고자 하는 유저의 아이디
		returns
		  O / X
	/user/logout	세션 로그아웃 처리

	POST
	/user/join	넘겨진 파라미터로 회원가입 처리
		params
	/user/login	넘겨진 파라미터로 로그인 처리
		params

> data.go.kr  공공데이터
스웨거를 이용한다는 뜻인가?

7. thymeleaf 사용하기 
resource
	templates > index.html (경로를 나타내줌) / 는 static 경로를 의미함
	static > css > style.css
	tip) VSCode에서 자동 완성 가능

onclick에 주소 넣기
	방법1 location.href
	현재의 주소를 나타냄. localhost:8080/
	location.href='/user/join' 에 다가 주소를 넣어주면 현재 주소가 바뀜

	방법2 replace
	location.replace('/user/join');

	둘의 차이점
	replace.location 하면 뒤로가기 버튼이 안됨. 왜냐 바껴버리니깐 이전 경로가 없어지는 것

	index.html 에서 회원가입 페이지로 이동시키면, 
	페이지 이동 요청을 controller에 보냄

8. templates > user > join.html 파일 만들기

흐름 정리
사용자가 index.html 페이지에서 로그인 폼을 작성 후 제출
입력된 데이터는 form 태그의 action 속성에 지정된 url 로 전송
HTTP POST요청으로 서버에 제출 /user/login
서버에서는 @Controller를 사용하여 /user/login url로 들어오는 POST 요청을 처리하는 메서드를 청의

@Controller
public class UserController {

    @PostMapping("/user/login")
    public String login(@RequestParam String username, @RequestParam String password) {
        // 로그인 처리 로직
        return "redirect:/home"; 
    }
}




