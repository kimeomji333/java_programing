Ajax(Asynchronous Javascript And XML)
	빠르게 동작하는 웹 페이지를 만들기 위한 개발 기법이다.
	Ajax는 웹 페이지 전체를 다시 로딩하지 않고도, 웹 페이지의
	일부분만을 갱신할 수 있고 백그라운드 영역에서 서버와 통신하여
	그 결과를 웹 페이지의 일부분에만 표시할 수 있다.ex. 실시간차트
	이 때 서버와 데이터를 주고받을 수 있는데 주고받는 대표적인 데이터의 형태는
	JSON, XML, HTML, 텍스트 등이 있다.

Ajax의 장점
	웹 페이지 전체를 다시 로딩하지 않고도 웹 페이지의 일부분만을 갱신할 수 있다.
	웹 페이지가 로드된 후에 서버에 데이터 요청을 보내고 응답을 받을 수 있다.
	다양한 UI 구현(동적인 페이지 구현)이 가능해진다.

Ajax의 단점
	페이지의 이동이 없기 때문에 통신이 히스토리에 기록되지 않는다.
	반복적인 데이터를 요청하면 느려지거나 작동하지 않게 된다.(서버 과부하)

Ajax의 구성 요소
	웹 페이지의 표현을 위한 HTML, CSS
	* 웹 서버와의 비동기식 통신을 위한 XMLHttpRequest 객체
	통신 결과를 받아오기(데이터의 교환을) 위한 JSON, XML, ...
	통신 결과를 통해 화면 구성을 동적으로 조작하기 위한 DOM 모델

XMLHttpRequest 객체
	Ajax의 가장 핵심적인 구성 요소는 XMLHttpRequest 객체이다.
	이 객체는 웹 브라우저가 서버와 데이터를 교환할 때 사용한다.
	웹 브라우저가 백그라운드에서 계속해서 서버와 통신할 수 있는 것은
	이 객체를 사용하기 때문이다.

XMLHttpRequest 객체 생성
	const 객체명 = new XMLHttpRequest();

open()
	서버로 보낼 Ajax 요청의 형식을 설정한다.

	open(전달방식, URL주소, 비동기여부)

	전달방식 : GET, POST, ...
	URL 주소 : 요청을 처리할 서버의 요청 주소 작성
	비동기 여부 : 요청을 동기식으로 전달할지 비동기식으로 전달할지 선택

send()
	작성된 Ajax 요청을 서버로 전달하는 메소드

	send();				GET 방식(URL에 데이터가 포함되어 있음이 전제)
	send("키1=값1&키2=값2&...")	POST 방식

Ajax 처리 과정
	Ajax 요청시 xhr 객체는 각 상태별로(상황별로) readyState가 바뀐다.
	처음에는 0(XMLHttpRequest.UNSET, 보내지 않음)이었다가 open 메소드를
	호출하는 순간 1(XMLHttpRequest.OPENED)로 바뀌고 send 호출시 순차적으로
	2(XMLHttpRequest.HEADERS_RECEIVED), 3(XMLHttpRequest.LOADING),
	4(XMLHttpRequest.DONE)로 바뀐다. 최종적으로 readyState가 4가 된다면
	(통신이 완료되었다면) 상태코드(xhr.status)가 성공을 가리키는 200일 때
	응답된 데이터를 확인할 수 있다. 응답된 데이터로 DOM을 활용하여 알맞게 페이지를 변화시킨다.

JSON(JavaScript Object Notation)
	{"키":"값", ...}
	경량화된 데이터 교환 형식. 서로 다른 언어들 간 데이터를 주고받을 수 있도록 만들어진
	텍스트 기반의 형식. 프로그래밍 언어가 아닌 데이터 표기 방법 중 하나이고 기본적으로
	name:value 형태의 구조를 띄고 있다.

	스프링 컨트롤러에서 @ResponseBody로 자바 객체를 return 시 자동으로 JSON으로 변환 후 응답

fetch
	자바 스크립트에서 통신을 쉽게 할 수 있도록 도와주는 API
	fetch('URL 주소',{ 통신 설정 }).then(콜백함수)


다른 두 언어간 통신 사이 데이터 주고 받음
자바에서는 JSON화를 함.(자바 객체를 ResponseBody로 객체를 보냄)
자바 객체를 문자열화
자바스크립트에서는 JSON.parse(xhr.responseText) 자바스크립트 객체화를 함.
문자열을 자바스크립트객체화





