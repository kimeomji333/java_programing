24-08-22 목요일
쿠키(Cookie)
	요청헤더에 쿠키가 들어있음(클라이언트에서 저장을 함)
	웹 브라우저가 저장하고 있는 데이터로, 클라이언트가 웹 서버에 요청을 보낼 때 
	저장되어 있는 모든 쿠키를 요청 헤더에 담아서 같이 전송한다.
	ex. 아이디저장
	생성 저장 활용

쿠키의 장단점
	클라이언트의 일정 폴더에 정보를 저장하기 때문에 서버의 부하를 줄일 수 있다.
	데이터가 사용자 컴퓨터에 젖아되기 때문에 보안의 위협을 받을 수 있다.
	데이터 저장 용량의 한계가 있다.(소용량의 문자열 데이터만 저장)
	일반 사용자가 브라우저 내 기능인 "쿠키 차단"을 사용하면 무용지물이 된다.

쿠키 생성
	Cookie 객체명 = new Cookie("Key", "Value");

쿠키 저장
	서버에서 만든 쿠키 객체를 클라이언트 컴퓨터에 저장해야 하므로
	"응답"을 통해서 생성한 쿠키를 보내주어야 한다.
	resp.addCookie(쿠키객체);

쿠키 사용
	사용자가 요청 때 함게 보내주는 요청 헤더(Request Header)에서 쿠키를 꺼내 사용한다.
	
	req.getHeader("Cookie")
		요청에 있는 Header 정보 중에 Cookie 라는 이름의 헤더가 있는지 확인
		null 이라면 전송된 쿠키가 하나도 없다는 뜻
	
	req.getCookie()
		클라이언트가 전송한 모든 쿠키 객체들의 배열, return 타입은 Cookie[]

	쿠키객체.getName()
		쿠키의 이름(Key)

	쿠키객체.getValue()
		쿠키의 값(Value)
	
쿠키 수정
	쿠키객체.setValue("새로운 값");
	쿠키 객체를 수정한 것이기 때문에 실제 본체(클라이언트에 저장되어 있는 쿠키)를 수정하기 위해서는
	클라이언트 쪽에 저장되어 있는 쿠키 대신에 수정된 쿠키 객체를 새롭게 저장해주어야 한다.

쿠키 삭제
	쿠키의 유효기간을 설정해주는 방식으로 삭제할 수 있다.

	쿠키객체.setMaxAge(n)
		n 초만큼 쿠키를 유지하다가 삭제되도록 설정

	쿠키 수정이나 삭제시 설정된 쿠키객체를 다시 resp를 통해 사용자 컴퓨터에 추가해준다.
	(기존 정보로 만들어진 쿠키 대신에 새로운 것으로 덮어씌우기 위해서)


세션(Session)
	(서버가 돌아가는 중에 저장하는 것
	동시에 4군데에서 서버를 사용 중이라면 개별적으로 공간의 세션을 분리해져야 하니,
	서버에 열쇠(SesisonID jsessionid)를 전달하면 서버는 공간에 접근하여 사용자에게 보여준다.
	별개의 세션id()를 가지고 있기 때문에 구분 가능)
	
	브라우저 마다 하나씩 존재하고 고유한 세션id 생성 후 정보를 저장한다.
	클라이언트 측에는 SessionID 만 저장해주고 후에 클라이언트가 세션 정보를 필요로 할 땐
	그 SessionID를 서버에 보내주며 정보를 요청한다. SesisonID는 클라이언트 측에 쿠키로 저장이 된다.

세션의 장단점
	단순 클라이언트 측에서는 접근할 수 없기 때문에 보안성이 좋고 저장 용량의 한계가 거의 없다.
	서버에 데이터를 저장하므로 서버 부하에 걸릴 수 있다.
	





-------------- 공부 내용 ---------------
1.
쿠키는 잠깐 저장하는 부스러기 정보들임.

2. 서버사이드렌더링 vs. 클라이언트사이드렌더링
SSR(Server Side Rendering)
	서버쪽에서 렌더링을 하여 화면에 보여주는 방식으로
	완전하게 만들어진 HTML 파일을 받아와서 그리기 때문에 로딩 속도가 빠르다.
동작 순서
	서버가 렌더링된 HTML 파일을 보내고 브라우저가 받는다.
	브라우저가 페이지를 화면에 띄워주고 js 파일을 다운 받는다.
	브라우저가 React를 실행한다. 
요약
	서버사이드렌더링은 클라이언트가 서버에 매번 데이터를 요청하고 서버에서 처리하는 방식이다.
	요청이 들어올 때마다 서버에서 새로운 화면을 만들어서 제공하기 때문에
	화면을 그리는(렌더링) 주체가 서버이다.

CSR(Client Side Rendering)
	HTML 파싱부터 js 읽기까지 브라우저에서 하기 때문에 처음에 화면을 띄우는 데 시간이 걸린다.
	
동작 순서
	사용자가 웹사이트에 요청을 보낸다
	CDN이 빠르게 HTML 파일과 JS 파일에 접근할 수 있는 링크를 보낸다.
	- 여기서 CDN이란? Content Delivey Network 물리적으로 가까운 서버에서 요청에 응답하는 방식
	다운이 완료된 js가 실행된다. 데이터를 위한 API가 호출된다.(유저들은 placeholder를 보게 된다)
	서버가 API 요청에 응답한다.
	API로부터 받아온 data를 placeholder 자리에 넣어준다. 
요약
	서버에서 필요한 데이터를 한 번에 받아오고 받은 데이터를 브라우저가 주체가 되어 그린다.


3.
Spring Model 객체
	컨트롤러에서 처리한 데이터를 뷰로 전달하는데 사용된다.
	addAtrribute(String attributeName, Object attributeValue)
	뷰에서 사용할 변수 이름, 변수에 할당된 값

사용 예시 
Spring MVC Controller에서 
	1. 파라미터에 Model 타입의 객체를 선언, 이후 addAttribute()를 통해 전달

	@Controller
	public class ExampleController {

  		  @GetMapping("/greet")
  		  public String greet(Model model) {
    		   model.addAttribute("message", "Hello, Spring!");
     		   return "greetView";  // 뷰의 이름 (예: greetView.jsp)
  	 	 }
	}
	-> jsp파일, thymeleaf 등으로 구현

	2. @ModelAtrribute 사용
	메서드 매개변수나 메서드에 붙여서 사용
	자료형 파라미터 앞에 붙여주고 속성값으로는 화면에서 출력할 때 사용할 이름(여기서 mypage)을 지정해준다.
	<h2>page : ${mypage}</h2>

	-> 요청 파라미터를 모델에 자동 바인딩하거나, 특정 객체를 모델에 추가할 수 있다.

	@Controller
	public class UserController {

  		  @GetMapping("/user")
  		  public String getUser(@ModelAttribute("mypage") User user) {
   		     return "userView";
  		  }
	}
	-> 요청파라미터를 user 객체에 바인딩하고, 객체를 모델에 자동 추가


4.
바인딩에 대해서
	식별자와 값을 연결하는 과정을 의미
	예를 들어, 변수 선언은 변수 이름(식별자)과 확보된 메모리 공간의 주소를 바인딩하는 것이다.
	웹개발에서 바인딩이란, 데이터를 특정 위치에 동적으로 연결하는 것을 의미
	프론트엔드 코드(HTML, CSS, JS)에서 서버 측 데이터를 사용하도록 돕는데 사용된다.

5.
요청객체의 헤더 안에 저장되어 있다.
HttpServletRequest > getCookie를 해서 배열로 가져올 수 있음

응답객체에 쿠키를 만들어서 세팅할 수 있음.
HttpServletResponse > addCookie를 해서 쿠키객체를 만들어서 담아준다.

세션과의 차이임 (유지되어야 하는 정보들)
쿠키는 다음번에 유지되어야 하는, 잠깐 저장하는 정보들


6.
jsessionid
톰캣 컨테이너에서 세션을 유지하기 위해 발급하는 키
http 프로토콜은 stateless하다. 요청할 때 새로운 연결이 생성되고, 응답후 연결은 끊기게 되므로 상태를 유지할 수 없다.


6-1.
stateful과 stateless
클라이언트와 서버간의 통신을 상태유지(Stateful)하느냐, 상태유지하지않음(Stateless)인지 
상태는 어떠한 정보를 말하는 것으로 

예를 들어, 로그인의 경우 페이지를 이동해서 풀리지 않고 계속 유지되는 것으로 서버가 클라이언트 상태를 유지하고 잇으니 가능하다.
클라이언트의 정보를 기억한다는 것은 어딘가에 정보를 저장하고 통실할 때마다 읽는다는 뜻
일반적으로 브라우저의 쿠키에 저장되거나 서버의 세션 메모리에 저장되어 상태를 유지하게 된다. 

무상태는 서버가 클라이언트의 상태를 보존하지 않음을 의미
서버는 단순히 요청이 오면 응답을 보내는 역할만 수행. 상태관리는 클라이언트에게 책임이 있는 것.
통신에 필요한 모든 상태 정보들은 클라이언트에서 가지고 있다가 서버와 통실할 때 데이터를 실어 보내는 것이다. 


7. 
세선이란
클라이언트와 서버 간의 연결 상태를 의미
구체적으로는 클라이언트가 브라우저에 접속하여 서버와 접속이 종료하기 전의 상태를 의미(사용자가 창 닫기 전까지 상태)

세션의 동작 방식
1) 세션 생성
	클라이언트가 서버에 처음 요청을 보낼 때, 서버는 클라이언트에게 세션id(브라우저에 쿠키 형태로 저장)를 발급한다. 
	이 세션id 기반으로 서버 메모리나 데이터 저장소에 세션 정보가 저장된다.
2) 세션 저장
	세션 관련 데이터는 HttpSession 객체를 통해 저장된다. (setAttribute메서드 사용)
3) 세션 조회
	
HttpServletRequest 객체는 HTTP 요청에 대한 정보를 캡슐화한다. 
HttpSession 객체는 세션데이터를 저장하고 관리하는 객체이다. 

