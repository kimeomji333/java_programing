24-10-22 화요일

useRef()
	상태/변수 관리하기 위한 훅

	const 변수명 = useRef(초기값);
	1. 리렌더링 사이에 특정 값을 저장하고, 그 값의 변경이 또 새로운 리렌더링을 불러오지 않도록 할 때
	값 유지, 리렌더링에 영향을 주고 싶지 않을 때
	2. 컴포넌트의 DOM 요소에 직접 접근하여 포커스 설정, 텍스트 선택, 미디어 재생 등을 제어할 때
	레퍼런스에 담아서 렌더링시에 없어지지 않도록 함
	3. 해당 ref의 값을 사용하기 위해서는 변수명.current로 접근

	const inputRef = useRef([input 태그들? 변수담아두기]);

	DOM 요소를 ref에 담아준다. 

useEffect()
	렌더링 시에 해야할 것들이 있을 때, 
	예를 들면 게시글 리스트 페이지에 들어갔을 때, 세션 검사하는 것
	
	useEffect(콜백함수,[종속성,...]) - 렌더링 시에 콜백함수 호출

	컴포넌트의 effect(부가효과)를 설정할 수 있는 훅
	렌더링 시 콜백함수를 호출하나 두 번째 매개변수 배열에 포함된 종속성들의 변화가 없다면,
	콜백함수를 호출하지 않음

	useEffect(콜백함수)		: 종속성 배열이 아예 없는 경우는 리렌더링 때마다 호출
	useEffect(콜백함수,[])		: 빈 배열인 경우는 처음 한 번만 호출
	useEffect(콜백함수,[종속성, ..])	: 종속되어 있는 값의 변화로 인한 리랜더링 때마다 호출

	종속대상을 잘 파악해야 한다. 

	잘하는 실수
	

Join 예제
	1. 렌더링 준비
		렌더링 되며 ref 설정(inputRef)
	2. 렌더링 하며 input 태그들에 써져있는 ref 속성 처리
		addInputRef() 함수를 호출하며 inputRef.current에 각 input 태그를 추가
	3. state 처리
		렌더링 이후 state 설정(list, inputs)
	4. 렌더링이 완료 되었으면 useEffect() 확인
		- 초기 렌더링, list 변화가 있을 시 콜백함수 호출
		- 아닌 경우에는 스킵
	5. <input> 태그에 무언가를 입력할 시 inputs state에 변화가 일어나며 리렌더링 (change이벤트 달아났으니깐)
		{id,pw,name} 값이 변화되며 <input>들의 value 속성값이 변화되므로
		무언가를 입력할 때마다 새로운 값으로 렌더링을 하고 있다는 뜻
		하지만 list state는 변화가 없으므로 effect는 수행되지 않음
	6. 가입 버튼을 누르면 list 배열에 입력한 객체를 추가
		새로운 객체가 추가되며 list state에 변화가 생겼으므로 리렌더링을 하고
		이 때 list 배열은 effect의 종속성으로 선언되어 있기 때문에 effect 수행








useState()
일반변수는 재렌더링했을 경우 유지할 수 없으니, state를 사용했음.
값 유지, 리렌더링에 영향 주고 싶을 때


<< 공부 내용 >>
1. useState와 useRef의 차이
둘 다 React에서 상태와 DOM 요소를 관리하는데 사용하는 훅이지만, 목적과 동작방식에서 차이가 있다. 

useState
컴포넌트의 상태를 관리
값이 변경되면 컴포넌트가 재렌더링(화면에 반영되고 컴포넌트가 재실행)
초기값 설정 후, 상태 업데이트 하기 위해 반환된 setState 함수를 호출
비동기적으로 상태 업데이트

useRef
DOM 요소에 접근하거나 컴포넌트의 상태 저장(주로 렌더링과는 관계없는 값이나 참조를 저장할 때 사용)
값이 변경되어도 컴포넌트는 재렌더링 되지 않음
초기값 설정 후, 값은 .current 프로퍼티에 저장


2. React의 동작원리가 궁금하다.
React는 UI를 구축하기 위한 JavaScript 라이브러리로, 컴포넌트라고 불리는 코드의 파편을 이용하여 UI를 구성하도록 돕는다.
React에서의 가상DOM은 UI 업데이트를 효율적을 처리하기 위해 사용하는 개념이다.


DOM 은 문서 객체 모델로, 웹페이지를 이루는 태그들을 JavaScript가 이용할 수 있는 (메모리에 보관할 수 있는)객체 모델을 의미한다.
웹페이지의 요소들을 계층 구조로 나타내며, 각 요소는 객체로 표현된다.

가상 DOM은 React 라이브러리에 의해 실제DOM과 동기화하는 프로그래밍 개념이다.
React 컴포넌트의 상태나 프로퍼티가 변경될 때마다 가상 DOM을 업데이트한다. 

* 컴포넌트란?
	React에서 UI를 만드는 기본 단위. 예를 들어, 웹페이지의 버튼, 리스트 등(레고블록?개념)

	```javascript
	const MyButton = () => {
	    return <button>클릭하세요!</button>;
	}
	```

	MyButton은 하나의 컴포넌트로, 버튼을 만들어준다. 

* 프로퍼티(Props)란?
	컴포넌트에 정보를 전달하는 방법. 부모 컴포넌트에서 자식 컴포넌트로 데이터를 보낼 때 사용

	```javascript
	const Greeting = (props) => {
   	 return <h1>안녕하세요, {props.name}님!</h1>;
	}

	const App = () => {
	    return <Greeting name="철수" />;
	}
	```

	Greeing 컴포넌트는 name이라는 props를 받아서 인사말을 만든다. App 컴포넌트는 Greeing에 철수라는 값을 전달함.


실제 DOM에 필요한 최소한의 변경만 적용하여 브라우저의 성능을 향상시키고, 업데이트 과정을 최적화한다. 

React는 SPA이기 때문에 (querySelector, jQuery와 같은 라이브러리를 사용하여 속성을 바꾸면) DOM의 복잡도가 증가하고, 렌더링을 자주하여 PC의 자원을 더 소모하게 되는 문제를 해결하기 위해서

https://minf.tistory.com/entry/React-React%EB%9E%80-%EB%8F%99%EC%9E%91%EC%9B%90%EB%A6%AC%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%90%A0%EA%B9%8C 


3. npm이란?
node packaged manager 로 node.js로 만들어진 packaged(module)를 관리해주는 툴
node.js(JavaScript를 웹 브라우저 밖에서 사용 가능하게 해주는 런타임 환경) 를 다운받아서 터미널에서 사용 가능하다.
npm i -g create-react-app(CRA설치, Create React App으로 최신 리액트 앱을 설정할 수 있도록 하는 명령) 로 모듈을 다운받는다. 
