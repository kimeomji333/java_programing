24-10-21 월요일
React
	메타(facebook)에서 개발한 오픈 소스 자바스크립트 라이브러리
	자체적으로 DOM을 활용하여 변화된 부분만 리렌더링 하여 페이지에 변화를 줌
	리렌더링이 잦은 동적인 화면을 구현 시 효율이 좋음
	모듈형 개발을 통해 생산성 향상
	SPA(Single Page Applicaiton)

	React - CSR(Client Side Rendering)
	Thymeleaf, JSP - SSR(Server Side Rendering)

React를 이용한 프론트 개발

		요청		내부에서 ajax 통신
	사용자	->	React(프론트) 서버	->	Spring Boot(백) 서버
		<-	정적인 리소스만 가짐  <-
		렌더링			결과 데이터 반환
	
Node.js
	JavaScript를 웹 브라우저 밖에서 사용 가능하게 해주는 런타임 환경
	JavaScript를 이용하여 서버 구축 가능(백엔드 개발 가능)
	즉, 브라우저를 키지 않아도 js코드를 os기반으로 구축 가능해진다.
	npm(node packaged manager) 패키지 관리자를 이용한 편한 라이브러리 설치 - node.js로 만들어진 pakage(module)을 관리해주는 툴

	https://nodejs.org/  <- 안정성을 위한 LTS 버전 설치

	NODE 명령어르 ㄹ실행하기 위해서 터미널이 필요
	VSCode > Ctrl + ~

리액트(CRA) 설치
	Create React App, 손쉽게 최신의 리액트 앱을 설정할 수 있도록 하는 명령
	리액트 프로젝트를 쉽게 만들어주는 것임.
	
	터미널 열어서
	npm i -g create-react-app  <- cra 설치

터미널 명령어
	cd(change directory)		: 경로 이동
	npx create-react-app 프로젝트명	: 리액트 프로젝트 생성
	npm start			: 현재 들어있는 경로의 node 프로젝트 실행

JSX
	JavaScript 기반의 확장된 표현식 문법
	+ node 에서만 해석 가능한 문법, 자바스크립트의 돔 코드로 변환
	렌더링을 위한 HTML 태그 형태 사용 가능
	렌더링을 위한 JavaScript 값 표현식 사용 가능
	JSX는 컴파일 후 JavaScript의 객체로 인식
	속성 정의시 JavaScript의 DOM 객체의 프로퍼티로 작성
	객체의 프로퍼티명(카멜표기법)은 className이므로   
	단일 태그여도 마지막에 닫는 태그 필수(<br></br>, <br/>)
	ex) 
		const url = "https://www.naver.com";
		const el = <a href={url} className="link">네이버로 이동</a>

	만들어지는 하나하나를 React Element라 부름 (리액트 프로젝트의 가장 최소 단위
	의미를 가지는 하나의 단위가 되면 component라고 함
	비트와 바이트 처럼

리액트 프로젝트의 실행 순서
	1. npm start 명령으로 node 프로젝트가 컴파일 되며 src/index.js를 찾아서 실행
	2. index.js에 있는 내요을 수행하며 해당하는 내용을 public/index.html에 적용시킴
	3. ReactDOM의 render()를 통해 내부 내용이 렌더링


컴포넌트
	모듈화의 목적: 버튼과 컴포넌트는 동일하되, 안의 내용이 달라야 할 때(내부 내용에 변화를 주어야 할 때)

	컴포넌트에 함수를 호출하면서 name명에 데이터를 넘겨주면서(프롭, prop 들은 매개변수에 담기게 됨) 모듈화를 시킴

	컴포넌트의 각 상태는 state라 부름
	컴포넌트는 상태가 변화될 시 자동으로 리렌더링을 수행

useState()
	리액트에서 제공하는 함수를 훅이라고 함.useState()는 훅의 대표임
	const [변수명,setter명] = userState(초기값);
	상태 하나를 정의하는 방법
	컴포넌트의 상태를 관리하는 훅
	setter를 이용해서 상태의 값을 변화시킬 시 컴포넌트의 리렌더링이 일어남
	useState는 리액트의 훅(Hook) 중 하나로, **상태(state)**를 관리하기 위해 사용됩니다.

	다음 함수 호출할 때, 변화를 예측하는 것? 변화된 채로 보여주는 것이 아니라, 
	재렌더링이 일어날 때 변화된 값으로 바뀌는 것.

컨테이너-프레젠터(Container-Presenter) 패턴
	타입을 두 개로 나눠서 분리해서 파악
	컴포넌트에 필요한 핸들러들을 컴포넌트 생성을 위한 js, jsx에 모두 넣으면
	코드가 길어지고 가독성이 안좋게 된다. 또한, 한 페이지를 구현하기 위해서는 여러 컴포넌트가 필요하다.
	따라서 해당 페이지를 구현하기 위한 프레젠터는 리액트 엘리먼트만 리턴을 하고, 
	그런 여러 프레젠터와 핸들러들, 그 외의 js 함수들은 컨테이너에서 선언 및 콜백 함수로 호출을 한다. 
	데이터 처리와 화면 출력을 서로 나누어서 선언하여 관리하는 패턴
	
	ex) 패턴이 적용되지 않은 예
	const Main = () => {
		const handler = () => {}
		...
		return(
			<div id="wrap">
			...
			<div>
		)
	}


	ex) 패턴이 적용된 예(Main.jsx)
	const MainContainer = () => {
		const handler = () => {}
		...
		return <Main></Main>
	}
	const Main = () => {
		return(
			<div id="wrap">
			...
			</div>
		)
	}











node 3000이 기본
종료는 ctrl c


라이브러리를 package.json에 적고 npx~ 하면 라이브러리 다운받아짐
pom.xml과 같은 역할을 함

npm start를 하면 src > index.js를 실행한다.

dom을 이용해서 요소 안에 무언가가 써지는 형태

브라우저에 띄움 index.html 에 가면 id="root"로 
npm start로 index.js 실행 App이라는 요소에 렌더링.
App.js 에 가면 function App(){ return(렌더링)}을 한다. 




<< 클래스 다이어그램 만드는 방법 >> 
객체지향 프로그래밍에서 클래스 간의 구조와 관계를 시각적으로 표현한 다이어그램

1. 클래스 식별
먼저 시스템에서 필요한 클래스를 식별한다. (하나의 개념 또는 객체)
예를 들면, user, plan, review, destination, comment 같은 클래스를 식별

2. 클래스의 속성과 메서드 정의
각 클래스가 가질 속성(필드)과 메서드(행동)을 정의
예를 들어, user에는 userId, password, email / login(), logout(), checkId()

3. 클래스 간 관계 설정
연관: 클래스 상호작용(실선)
집합: (빈 마름모)
합성:
상속:
의존:
...

4. 다이어그램 그리기
직사각형으로 표현하고, 세 부분으로 나눈다. 
클래스 이름, 속성 목록, 메서드 목록

