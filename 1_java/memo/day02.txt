24-06-25-TUE
Ctrl + M : 보고있는 창 최대화
Ctrl + Shift + F : 들여쓰기 정리
----------------------------------------------------------------------

사용자 - 개발자 의 집단의 관계


nextLine()
	사용부분 통째로 사용자가 입력한 문자열 값
	공백도 문자로 입력받는다. 
	앞에 nextLine()을 제외한 다른 입력이 있다면, 의미없는 sc.nextLine()을 하나 미리 써주어야 한다. 
	(위의 입력에서 입력 종료로 사용한 \n을 입력받아버리기 때문)

nextInt()
	사용부분 통째로 사용자가 입력한 정수 값

입력 - 처리 - 결과 출력

형변환
	자동 형변환(암시적, 묵시적 형변환)
		정수 + 실수 = 실수
		3 + 0.0 = 3.0

		문자 + 정수 = 정수
		'A' + 0 = 65

		정수, 실수, 문자, ... + 문자열 = 문자열
		10 + "" = "10"   - 빈문자열 이용하기 

	강제 형변환(명시적 형변환)
		(자료형) : 형변환 연산자
		(자료형)값
		(double)10   -> 10.0

문자열로 입력 받음 -> 형변환을 이용해서 연산 로직
	Integer.parseInt("정수로 이루어진 문자열") : 문자열을 정수로 형변환
	Double.parseDouble("실수로 이루어진 문자열") : 문자열을 실수로 형변환

연산자
	"다양한 기능이 있는 특수문자 혹은 단어"
	예약어는 연산자라고 부르지 않음 public, class, int, ...
	
	연산자 우선순위 - 최단산쉬관리삼대
	-최우선 연산자	() .
	-단항 연산자	!부정연산자, ()형변환연산자, ~비트뒤집기
	
	-이항 연산자
	산술 연산자		+ - * / %(나머지, 모듈러스)
	쉬프트 연산자	(비트연산의 한 종류)연산을 비트 단위로 연산 << >>
	관계 연산자		>, <, ==, !=
	논리 연산자		&& ||
	
	-삼항 연산자	? :
	-대입 연산자	=
	
	-결합성
	한 문장 안에 우선순위가 같은 연산자가 있을 때
	알맞는 방향으로 결합되어 연산되는 성질

비트 연산
	17 : 10001
	14 : 01110

	AND(논리곱)	:두 비트가 모두 1일 때 1
		17&14 -> 10001 & 01110 -> 00000 -> 0(십진법)

	OR(논리합)	:두 비트 중 하나라도 1이면 1
		17|14 -> 10001 | 01110 -> 11111 -> 31(십진법) 2^4=16+8+4+2+1

	XOR(베타논리합)	:서로 다른 비트라면 1
		17^14 -> 10001 | 01110 -> 11111 -> 31 

	NOT(논리부정)	:0은 1로, 1은 0으로 비트를 뒤집어준다.(부호 비트도 뒤집힌다)
		~14 -> ~ 01110 -> 10001 -> -15
		~a = -(a+1) 정도로 알아두기

십진법 -> 이진법 : 17를 2로 나눈 나머지들을 반대로 
이진법 -> 십진법 : 11111을 2의 몇 제곱인지 계산해서 더하기

쉬프트 연산자
	a << b  좌쉬프트: a를 b만큼 좌측으로 비트 이동
		14 << 1 -> 01110 << 1 -> 11100 -> 28

	a >> b	우쉬프트: a를 b만큼 우측으로 비트 이동
		14 >> 1 -> 01110 >> 1 -> 00111 -> 7

조건식
	결과가 참 또는 거짓, 둘 중 하나로 나오는 식
	조건을 제시하는 식
	상태를 물어보는 식
	주장하는 식	
	조건식에는 관계 연산자가 사용이 된다. 
	
	자바에서는 true, false라는 값을 참, 거짓으로 사용한다. 

	논리형 boolean	1byte	true, false
	boolean a = true;
	boolean result = 10>3;

	
논리 연산자
	조건식들의 관계를 설정해주는 연산자
	A, B는 조건식(boolean 타입의 값)으로 가정한다. 
	
	A && B : A와 B 조건식의 연산 결과가 둘 다 true 이면 true
	A || B : A와 B 조건식의 연산 결과 중 하나라도 true 이면 true


삼항 연산자
	(조건식) ? (참일 때 값) : (거짓일 때 값)
	사용부분 통째로 값
	조건식의 결과값인 true, false를 우리가 원하는 특정 값으로 변환할 때 사용
	결과가 두 가지의 값으로 나올 때 사용하는 것이 좋다. 

제어문
	위에서 아래로 코드의 흐름을 제어하기 위해 사용하는 문장
	-조건문(선택제어문)
		if, else if ~ else
		switch ~ case ~ default

	-반복문(반복제어문)
		while
		for

조건문
	조건에 따른 경우의 수를 나누기
	흐름 나누기
	선택지를 주기
	특정한 상태를 물어보기

if문
	if(조건식1) {
		조건식1이 참일 때 실행

	} else if(조건식2) {
		조건식2이 참일 때 실행
	
	} else {
		조건식이 거짓일 때 실행
	}


switch문
	코드의 흐름이 변수의 값 등가 비교로 인해 나뉘는 경우 사용
	switch문 뒤에 작성한 변수의 값에 따라 알맞은 case로 이동하고 문장을 실행한다. 
	하지만 그 밑에 case가 더 있다면 그 안에 있는 문장들도 실행된다. 	
	따라서 각 case들을 나누어 주려면 알맞게 break; 를 사용해야 한다. 

	switch(변수) {
	case 값1:
		변수에 담긴 값이 값1 이면 실행
		break;
	case 값2:
		변수에 담긴 값이 값2 이면 실행
		break;
	...
	default;
		변수에 담긴 값이 위의 갑들이 아닌 때 실행
	}	

기타 제어----------------------------------------------------*
	break	:속해있는 swich문이나 반복문을 탈출한다. 
	continue: 다음 반복으로 넘어가기 / 반복시 해야할 행위들은 무조건 함
	(while: 조건식 검사 / for: 증감식, 조건식 검사)

누적 대입 연산자(복합 대입 연산자, 누적 연산자) +=, -=, *=, /=, %=
	int data = 10;
	data = data + 5;
	data += 5;

	int data = 10;
	data = data - 5;	data = 5 - data;
	data -= 5;(O)		data -= 5; (X)


	String data = "A";
	data = data + "B";	data = "B" + data;
	data += "B";(O) 	data += "B";(X)
	("AB")			("BA")

증감 연산자
	++, --
	data += 1;	-> data++;
	data -= 1; 	-> data--;

	전위형
		사용하는 부분부터 바로 적용
		int data = 10;
		syso(++data); //11
		syso(data);   //11

	후위형
		다음 사용 부분부터 적용
		int data = 10;
		syso(data++); //10
		syso(data);   //11

반복문
	특정한 코드나 행위를 반복해야 할 때 사용
	
	조건에 의한 반복문
		while, do ~ while

	횟수에 의한 반복문
		for

	

while문 
	while(반복 조건식) {
		반복 조건식이 참일 동안 반복 실행할 문장
	}



do ~ while문 
	while문과 동일하지만 무조건 한 번은 실행한다.

	do {
		반복 조건식이 참일 동안 반복 실행할 문장
	} while(반복 조건식);


무한 반복
	while(true) {
		무한정으로 반복하여 실행할 문장
	}

	while문 뒤의 () 안에는 조건식, 즉 boolean 타입의 값이 와야 한다.
	따라서 그 안에 "true 라는 상수값"을 넣을 수가 있고, 그 값은 상수로 작성했기 때문에 
	절대 변하지 않는다. 따라서 그 while 문은 무한 반복하게 된다. 
	안에서 특정 조건일 때 "if문 안의 break"를 이용한 탈출구 하나 이상을 만들어 주어야 한다. 


for문
	횟수에 의한 반복문
	반복 횟수가 특정된 경우에 사용한다. 
	반복 때마다 무언가 값이 일정하게 변하는 경우에 사용한다.

	for(초기식; 조건식; 증감식) {
		실행할 문장
	}
	
	초기식 -> 증감식 -> 조건식 순으로 작성해야 로직 이해

	초기식: 반복문에 들어갈 때 딱 한번만 수행도니다. (변수 하나를 선언해준다.)
	조건식: 매 반복 전에 검사할 조건식을 작성한다. (변수를 이용한 조건식 설정 / 참이면 반복, 거짓이면 탈출)
	증감식: 매 반복 끝에 수행할 문장을 작성한다. (초기식에서 선언한 변수의 증감을 설정)



sqld 제54회 접수기간 7/22 시험일 8/24

charAt() : 문자열 -> 문자
parseInt() : 문자열 -> 숫자
	