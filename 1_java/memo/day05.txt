24-06-28-fri 5일차

Storage Class(저장 기억 부류) - 변수의 종류
	지역 변수: 메소드 내부에 선언된 변수
	"전역 변수: 메소드 외부에, 클래스 내부에 선언된 변수"
	정적 변수: static 이 붙은 변수

	지역변수		전역변수		정적변수
초기화	직접		자동		자동
생명주기	{ }		프로그램 종료시	프로그램 종료시
접근성	하		중		상






------------------------☆ ★ ☆ ★ ☆ 중 요 ★ ☆ ★ ☆ ★----------------------------

클래스
	"여러 변수들"과 "메소드들"을 둘 다 관리하기 위해 설꼐하고 사용한다.
	"공통 요소들을 추상적으로 묶어놓은 틀"
	(붕어빵 틀)
	
	1. 주어이다
		System.out.println();
		모든 문장 맨 앞에 클래스가 나오고 영어는 맨 앞에 주어가 나온다. 
		따라서 클래스는 주어이고, 대문자로 시작한다.
	
		String food = "banana";
		Monkey.eat(food);
		[주어] [동사] [목적어]
		클래스  메소드  변수

	2. 타입이다.
		클래스는 추상적인 개념이고 이 클래스 안에는 "필드"가 존재한다. 
		`추상적인 개념은 사용할 수 없기 때문에 그 필드들을 구체화시킴 대상이 필요하다.
		이러한 것을은 "객체"라고 부르고`, 영어로는 instance variable 이라 부른다. 
		(붕어빵)
	
		instance(인스턴스)는 예, 예시라는 뜻이고 추상적인 개념의 한 예시로서
		객체가 나오기 때문에 instance variable 이라 한다.
		(자동차인데 예를 들어 내차)
		[클래스]		[객체]

		도장을 찍는 행위 = 추상적인 개념을 구체화시켜 객체를 만드는 작업 (객체화)

		클래스명 객체명;
		int data;
		
		따라서 "클래스"는 이 때 만들어지는 "객체의 타입"이다.
		

클래스 선언
	다른 클래스 외부에서 선언한다.

	class 클래스명 {		
		필드(변수, 메소드) 선언
	}


	주소가 만들어지고
	객체가 만들어질 때 주소를 가짐(참조 변수처럼)


클래스 사용
	클래스는 추상적인 틀이기 때문에 먼저 객체화를 진행한다.
	클래스를 사용한다 라는 뜻은 객체를 만든다 라는 뜻이다.

	클래스명 객체명(통용적으로 사용) = new 클래스명();
	객체.메소드명();
	객체.변수

	하나의 저장공간에는 단 한개의 값만 담을 수 있다.
	`필드에는 여러개의 값이 존재하기 때문에 필드는 다른 곳(Heap)에 할당되고
	할당된 필드의 주소값을 저장하는 것이 객체이다.`
	-> 필드는 힙영역에 저장, 필드의 주소값 저장하는 것이 객체.

	
생성자
	클래스명 뒤에 소괄호
	생성자는 메소드와 똑같이 호출시 내부를 수행한다.
	하지만 객체를 생성해주고 호출시 new 키워드와 함께 쓰이며
	"생성된 객체의 주소값을 자동으로 리턴하기 때문에" 메소드라고 부르지 않는다.
	(즉, 우리가 원하는 값으로 리턴을 할 수 없다.)
	
	클래스를 선언하면 기본적으로 생성자 하나를 만들어주고 우리 눈에는 보이지 않는다.
	이러한 생성자를 기본 생성자라고 하며, "만약 직접 생성자를 선언하게 되면 기존에 있던 기본생성자는 사라지게 된다."

생성자의 목적
	1. 클래스의 필드를 똑같이 복사해서 메모리에 할당하고, 할당된 필드의 주소값을 돌려받기 위함 / 객체화의 목적
	2. 호출 시 내부의 내용을 수행하기 위함 / 초기화의 목적



this
	클래스 선언시 내부적으로 선언되어 생성된다.
	클래스 영역에서 한 번의 메소드 선언으로 여러 객체를 다루어야 한다.
	만약 메소드 내에서 해당 객체의 필드를 사용하고자 할 때 어떤 객체의 필드인지를 알 수 없다.
	따라서 객체에 마침표를 찍고 필드에 접근하거나 어떤 객체를 생성중일때는 현재 접근한 그 객체를 this 변수가 받는다.
	결과적으로 클래스 선언시 내부에서 this.필드명 으로 접근하면 "여러 객체를 하나의 메소드에서 구분하여" 다룰 수 있게 된다. (객체 구별용 변수)



학생들의 점수들을 관리하는 프로그램

(클래스 사용하는 방법) 메소드 관리, 정보 관리