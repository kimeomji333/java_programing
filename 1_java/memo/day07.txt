24-07-02-화 7일차
---------------------------
해야할 일
- dicegame 만들기 V
- 과제 assignment 완성 V
- 블로그 6,7일차 복습 내용 작성 X -> 고민
- day memo 총 복습 V
- 스터디 V
- 두잇 자바 프로그래밍 진도 X
---------------------------

업 캐스팅/다운 캐스팅
	상속 관계에 있는 부모와 자식 클래스 간에 서로 간의 형변환
	클래스는 reference 타입으로 분류되는 이를 참조형 캐스팅이라고 한다.

업 캐스팅(자동)
	자식 타입의 객체를 부모 타입으로 변환
	"부모 타입의 변수"에 "자식 클래스로 만들어진 객체를 담아주는 것"
	
	부모 타입의 변수에 자식 생성자를 호출하는 경우
	ex)
		Car car = new SuperCar();

	자식 생성자로 만들어진 객체를 부모 타입의 변수에 대입 - 위와 같은 내용임
	ex)
		SuperCar supercar = new SuperCar();
		Car car = supercar;

	부모 타입의 매개변수에 자식 객체를 넘길 때(가장 많이 사용)
	ex)
		void f(Car car) {}
		f(new SuperCar());

다운 캐스팅
	업 캐스팅 된 객체만 가능하다.
	다시 자식 타입으로 바꿔주는 것
	업 캐스팅 시 잘려나갔던 자식 클래스의 추가된 내용을 다시 달아주는 것

	(자식클래스명)업캐스팅된객체

	Car mycar = new SuperCar(); -
	SuperCar temp = new SuperCar(); - 업/다운 캐스팅 된 객체가 접근할 수 있는 범위
	Car momcar = new Car(); - 업 캐스팅이 되어있지 않기 때문에 다운캐스팅 불가능

instanceof
	객체 instanceof 클래스명: 객체가 뒤에 오는 클래스 타입인지 비교
				true/false 두자기 결과로 나오는 조건식
	
	부모객체 instanceof 부모클래스	true	
	부모객체 instanceof 자식클래스	false V
	자식객체 instanceof 부모클래스	true	
	자식객체 instanceof 자식클래스	true
	업캐스팅객체 instanceof 부모클래스	true	
	업캐스팅객체 instanceof 자식클래스	true

	부모클래스(카)
	자식클래스(슈퍼카)
	부모객체(k7) 
	자식객체(페라리)
	업캐스팅객체(창고장난 슈터카)

접근권한제어자
	다른 패키지나 혹은 다른 클래스에서 해당 필드에 접근할 수 있는 권한(범위)를 제어해주는, 설정해주는 키워드들

	(default)	: 같은 패키지에서만 접근 가능
	public		: 모든 곳에서 접근 가능
	private		: 다른 클래스, 다른 패키지에서 접근 불가
	protected	: 같은 패키지에서만 접근 가능, 자식에서는 자신의 필드처럼 접근 가능

	public
		모든 곳에서 자유롭게 접근이 가능해야 하는 필드들
		(데이터를 처리하고 기능을 담당하는 메소드들)

	private
		기능(public), 데이터포장(개발자들에게 data는 소중해, 밖으로 노출되지 않아야 안전)		
		자신만 이용하는 경우나 데이터를 담는 변수들
		(게시글 제목, 회원의 아이디, 계좌번호, 학생의 이름, ...) - 객체를 상징하는 데이터들

	protected(설계되어 사용하는 경우는 많지만, 직접 사용할 일은 많이 없음. 사용하고 싶다면 내 클래스에 상속시켜 주고 내 필드처럼 사용해야 한다.)
		상속이 목적
		(자식 클래스들이 사용 가능하고자 할때, 자식 클래스들에서 오버라딩을 해서 쓸 떄)

	(default)
		확실하게 같은 패키지에서만 이용할 때, 귀찮을 때.....

		
	private 필드는 직접 접근할 방법이 하나도 없기 때문에 무조건 public 메소드를 통해서 간접적으로 접근한다.
	(값을 사용하는 경우:getter / 값을 수정하는 경우:setter)


추상 클래스(불완전한 클래스)
	클래스들의 틀이 되는 클래스
	객체를 만들기 위함보다는 클래스 설계하기 위함 목적
	"추상적인 내용만 정의"하고 있는 클래스로, 구체적인 내용이 존재하지 않을 수도 있는 클래스
	상속받은 하위 클래스에서 그 내용들을 구현하도록 설계된 클래스이다.
	추상 클래스(부모)는 클래스들(자식)의 공통 요소들을 추상적으로 가상화 시켜놓기 때문에
	객체화 시 자식에서 재정의를 통한 구현을 하고, 그 자식타입으로 객체화를 진행해서 사용한다.
	부모 추상 클래스의 역할은 단지 자식 클래스들을 만들 때 틀로 존재해서 도와주는 역할을 수행한다. 
	그렇기 때문에 자식 클래스에서 재정의 해야하는 메소드의 이름과 형태만 가지고 있다. 즉, 메소드에 바디({})가 없다. 
	이러한 메소드를 추상 메소드라고 하며, abstract라는 키워드가 리턴타입 앞에 붙는다. 추상 메소드가 하나라도 포함되어 있다면 그 클래스는 추상 클래스로 선언해야 한다.

추상 클래스 선언
	abstract class 추상클래스명 {
		필드 선언
		abstract 리턴타입 메소드명();
	}	

	-> 추상 메소드는 자식 클래스에서 강제적으로 반드시 재정의 @Override 해야한다.
	일반 메소드도 추상 클래스 내부에 존재할 수 있다. 


자바 팀플 - 포폴못씀. 공부용. 인원수 적으면 사이즈 줄이기
52시간 자바1 끝
