24-06-27-thus 4일차

이중 for문, 다중 for문 (Nested For문)
	for문 안에 for문이 있는 형태
	바깥쪽에 있는 i for문은 다음 반복으로 넘어가기 위해서는
	안쪽에 있는 수행할 문장들을 모두 마쳐야 한다.
	안쪽에 있는 수행할 문장 중에 j for문이 있으므로, 
	안에 완전히 모두 완료되어야 i for문 입장에서는 내부에 수행할 문장들을 마친 것이 된다.
	따라서 가장 안쪽에 있는 문장은
	(i for문의 반복횟수) * (j for문의 반복횟수)만큼 수행된다.
	
	i	j
	0	0 1 2
	1	0 1 2


메소드
	처리하는 과정들을 구분지어놓은다. ex)회원 가입, 로그인
	이름 뒤에 소괄호
	단, 키워드 뒤에 소괄호는 메소드가 아니다. ex) for, while
	반복되는 코드, 기능, 행위, 차이 등을 쉽게 관리하기 위해 따로 선언되어 있는 블럭
	반복되는 것이 규칙적이지 않고, 우리가 원할 때 특정 코드를 수행하게 하고자 할 때 선언하여 사용한다.
	메소드를 사용하기 위해 "호출"한다.
	선언 -> 호출

	f      		(x)       =     2x + 1 함수 정의
	메소드 이름 	매개변수		수행할 문장, 리턴값
				

메소드 선언 구조
	메소드는 다른 메소드 바깥, 클래스 내부에 선언
	
	①리턴타입 ②메소드명(③자료형 매개변수1, 자료형 매개변수2, ... ) {
		④호출시 실행할 문장
		⑤return 리턴값;
	}

	① return 뒤의 값의 타입에 맞는 자료형을 작성해준다. 리턴갑이 없다면 void로 작성한다.
	② 동사형으로 작성한다. ( eat("연어"), eat("참치"), ... )
	③ 생략 가능하다. 하지만 생략시에는 외부(호출하는 곳)에서 값을 전달받을 수 없다.
	여러 값을 전달받아야 할 경우에는 콤마로 구분하여 그 값들만큼 선언해 주어야 한다.
	호출시에는 매개변수(인자)의 타입과 개수에 맞게 순서대로 값들(인수)을 전달해 주어야 한다.
	④ 생략 가능하다. 메소드 호출 때마다 수행해야 하는 코드를 그대로 작성한다.(알고리즘)
	⑤ 생략 가능하다. 


return
	return;		return 리턴값;
	return 키워드를 만나는 순간, 메소드 내부의 진행을 멈추고 호출했던 부분으로 다시 돌아간다.
	만약 return 키워드 뒤에 값이 작성되어 있다면 호출한 부분에 그 뒤의 값을 덮어 씌우며 돌아간다.
	(메소드 호출 부분을 통째로 값으로 봐야 한다)


return을 사용해야 할 때
	메소드 내부에서 모든 기능이 구현되지 않을 때
	호출하는 부분에서 아직 할 작업이 남았을 때
	메소드 기능의 결과(처리 결과)를 호출하는 부분에 알려주어야 할 때


return을 사용하지 않아도 될 때
	메소드 내부에서 모든 기능이 구현될 때
	

메소드 사용
	메소드는 클래스 내부에 있으므로 그 메소드가 속해있는 "클래스의 타입"으로
	먼저 변수를 만들어 주어야 한다(먼저 객체화를 진행해주어야 한다) 클래스 타입의 변수

	클래스명 변수명 = new 클래스명();

	변수.메소드명();		매개변수 없이 선언된 것은 그대로 이름으로 호출한다.
	변수.메소드명(값1, 값2, ...);	매개변수의 개수와 타입에 맞게 순서대로 값을 넘겨주며 호출한다.

	메소드 호출 부분은 선언부 마지막에 return 값이 있다면 
	호출한 부분 통째로 그 return 값으로 봐야 한다.
	단, return 값이 없다면 절대 값으로 봐서는 안된다.


메서드 선언 순서
	(두 정수의 덧셈 메소드)

	1. 메소드 명을 생각한다.
		void add() {	
		
		}

	2. 매개변수를 생각한다.
		입력값이 다르면(처리 결과가 다르면) 매개변수가 필요하다.
		void add(int num1, int num2) {	
			// 로직 작성
			int result = num1 + num2;
		}

	3. 실행한 문장을 생각한다.
		로직 작성

	4. 리턴값을 생각한다.
		void add(int num1, int num2) {	
			// 로직 작성
			int result = num1 + num2;
			return result;
		}

	5. 리턴타입 수정
		"int" add(int num1, int num2) {	
			// 로직 작성
			int result = num1 + num2;
			return result;
		}
