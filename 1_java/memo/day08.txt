24-07-03 수 8일차

인터페이스(interface)
	순수하게 "틀"로만 존재
	추상 클래스를 고도화시킨 문법이며, 반드시 추상 메소드와 상수만 선언해야 한다.
	다른 클래스에서 인터페이스를 상속 받을 때에는 implements 라는 키워드를 사용한다.
	상속받은 클래스는 인터페이스가 가지고 있는 추상 메소드를 반드시 재정의 해야한다. 

	jdk 8버전 이후로는 인터페이스에 default 메소드를 선언할 수 있다.(재정의하지 않아도 기본적인 구현을 사용가능으로)


	interface InterfaceA {
 	   default void methodA() {
     	 	  System.out.println("Default implementation of methodA in InterfaceA");
 	   }
	}

	interface InterfaceB {
  	  default void methodB() {
  	      System.out.println("Default implementation of methodB in InterfaceB");
 	   }
	}

	class MyClass implements InterfaceA, InterfaceB {
    		public static void main(String[] args) {
    		    MyClass obj = new MyClass();
      		    obj.methodA();  
      		    obj.methodB();  
  	  } 
	}
	-> 별도로 오버라이딩하지 않고도 기본 구현을 사용할 수 있다.



	따라서 사실상의 다중상속을 지원하게 된다. 인터페이스들 끼리 메소드 모호성이 발생한다면(같은 이름의 메소드끼리 충졸이 일어난다면)
	상속받은 클래스에서 명시적으로 작성(오버라이딩)해서 모호성을 해결해 주어야 한다.

	
	interface InterfaceA {
	    default void someMethod() {
    	   	 System.out.println("Default implementation in InterfaceA");
	    }
	}

	interface InterfaceB {
	    default void someMethod() {
	        System.out.println("Default implementation in InterfaceB");
	    }
	}

	class MyClass implements InterfaceA, InterfaceB {
    	 @Override
    	 public void someMethod() {
        	 // 명시적으로 오버라이딩하여 충돌 해결
       		 System.out.println("Overridden implementation in MyClass");
    	    }
	}
	-> 즉, 서로 다른 인터페이스에서 동일한 시그니처를 가진 default 메소드를 제공할 경우, 
	상속받은 클래스에서 명시적으로 오버라이딩하여 충돌을 해결해야 한다.


	상속받은 클래스 내부에서는 
		인터페이스명.super.메소드() 	< 상속받은 인터페이스의 메소드 호출
		super.메소드()		< 상속받은 클래스의 메소드 호출
	로 상속받은 인터페이스 내부의 메소드를 호출할 수 있고 이는 다중상속을 의미한다. 


디자인 패턴
	프로그램을 설계의 모습, 방식(코드 계획)

어댑터 패턴
	강제성이 강한 interface 대신에 "메소드의 틀을 받아오고" 싶을 때 사용하는 패턴

팩토리 패턴
	new 생성자() 를 통한 객체 생성 방식의 "강한 의존성을 약화시키고자" 할 때 사용하는 패턴

싱글톤 패턴
	전체 프로그램에서 특정 타입의 객체를 "단 한개만 만들어지도록 설계하고" 싶을 때 사용하는 패턴

내부 클래스(inner class) - 우리가 만들어서 사용하지는 않음?
	클래스 안에 클래스를 선언한 것
	클래스 내부에 클래스를 선언하여 외부 클래스의 필드에 용이하게 접근하기 위해서 사용한다. 
	내부 클래스의 필드를 이용하기 위해서는 먼저 외부 클래스의 객체를 만들고 그 객체를 통해 내부 클래스까지 접근해서 객체화를 해야한다.

	외부클래스명 객체명 = new 외부클래스생성자();
	외부클래스명.내부클래스명 객체명 = 외부클래스객체.new 내부클래스생성자();
	-> import시 축약 가능

	위와 같이 객체화를 하기가 까다롭고 번잡하기 때문에 사용할 때는 다른 방식으로 한다.
	외부 클래스의 필드에서는 자신이랑 같이 올라와 있는 내부 클래스를 바로 객체화 할 수 있다.
	따라서 보통은 특정 메소드의 호출 결과로 내부 객체를 부여받아서 사용하는 방식으로 설계된다.

내부 클래스를 사용하는 이유
	1. 상속처럼 이용
		외부 클래스의 필드를 마치 내 것처럼 접근하여 사용하기 위함
	2. 캡슐화
		은닉. 감춘 후 어떤 효과가 나는지만 알면 된다.
		외부 클래스의 객체가 없다면 내부 클래스도 존재할 수 없기 때문에 
		다른 클래스에서 내부 클래스에 쉽게 접근하지 못하도록 숨기기 위함

	참고.자바 GUI에서 내부 클래스 많이 사용됨.

익명 클래스(anonymous inner class)
	이름이 없는 클래스 -> 예제로 확인

예외 처리
	에러 : 심각한 오류 ex. 컴퓨터에서 블루스크린이 뜸. 경고창이 뜸. 프로그램이 꺼짐. 컨트롤할 수 없는 범위
	예외 : 덜 심각한 오류 ex. 개발자가 만들어 냄. 이대로 두면 에러가 발생하기 때문에. 

try ~ catch ~ finally
	
	try {
		예외가 발생할 수 있는 문장
		...
		컴터가 한 줄씩 실행이 되면서 예외가 발생하는 지 체크 후, 예외를 던짐
	} catch(예외클래스명 객체명) {
		던진 예외 객체를 잡아서 
		예외 발생시 실행할 문장
	} finally {
		필수로 꼭 해야하는 문장
	}

	예외처리는 서비스 측면에서 사용. 콘솔에 빨간 글씨를 보여줄 수 없으니, 문제 발생 시 추후 처리.

Exception 클래스
	모든 예외들의 부모 클래스
	모든 예외 객체들은 Exception 타입의 변수에 담길 수 있다. 

throws
	예외 떠넘기기
	메소드 선언부 내부에서 발생하는 예외를 무시하고 호출하는 곳으로 떠넘기는 문법
	호출하는 곳에서 예외가 발생하는 것이고, 그 곳에서 try ~ catch 로 잡아주어야 한다.

	리턴타입 메소드명() throws 예외1, 예외1, ... {
		예외1, 예외2, ... 무시하는 구역
	}

	프로그램의 진행을 방해하지 않음이 확실한 예외가 발생하는데
	매 번마다 try ~ catch로 묶어서 잡아주기 귀찮을 때
	예외를 일부러 발생시켜서 예외처리를 해당 메소드를 호출하는 곳에서 하도록 할 때



요즘 웹페이지는 어떤 형식과 디자인으로 이뤄어져 있는지 서핑 잘 해봐

사이트마다 선호하는 색상들
