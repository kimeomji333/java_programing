24-06-24-MON

java
프로그래밍 = 프로그램(하나의 짜놓은 대본 <- 뭘로 적지? 언어)

*(컴퓨터) 프로그램
	(소스코드로) 짜여진 틀

읽는 주제. 명령을 내릴 때 사람의 입장에서 언어
컴퓨터는 읽으면서 수행하는 경험
개발자인지 컴퓨터인지 입장에 따라서 생각회로 돌리기

컴퓨터 = 집합체 
3대 하드웨어 CPU, RAM, 하드디스크(SSD 저장장치)

RAM 책상같은 역할, 책을 펼쳐 놓을 수 있음
컴퓨터 처리 속도에 영향을 끼침

CPU 일꾼, 머리

하드디스크 SSD 책장 저장
작업속도에 영향 미치지 않음
책장 책상의 거리에는 영향 미칠 수 있음
하드디스크는 거리가 멀고
SSD는 거리가 가깝다.

그래픽카드 연필, 붓 등 이쁜 걸 들 수록 그림이 달라짐

개발을 하면 RAM 위에서 일어난다. 
하나로 모아놓은 집합체가 컴퓨터
우리가 명령을 내리려면 각각의 장치에게 주로 CPU
각 장치가 알아듣는 전기 신호가 다름

직접적으로 명령을 내리지 않고, 우두머리인 OS에게 명령을 내림
(우리가 적은 대본은 OS가 읽고 각 구성원들에게 명령을 각각 내려줌)

*OS(운영체제)
	하드웨어에 적절한 전기신호를 흘려주는 역할
	프로그램 -> OS -> 하드웨어

*JAVA
	컴파일 언어
	객체 지향 언어 -> 다음주 예정

*컴파일
	자바는 컴퓨터 언어가 아니라 사람의 언어이다. 
	고급언어(사람의 언어)를 기계어(컴퓨터 언어)로 바궈주는 작업
	목적파일(번역문) 생성된다. 
	즉 다음 번엔 번역할 필요가 없어지는 것이다. 수정해야할 경우 다시 번역해야하니 불편한 점도 존재
	Java : 클래스 파일( .class )
	
*컴파일러
	컴파일을 해주는 것
	javac.exe

*Java 프로그램
	프로그램 -> JVM(자바 가상 운영체제) -> OS -> 하드웨어

*JVM(Java Virtual Machine)
	자바 가상 운영체제
	자바 프로그램을 시행해준다.
	JAVA(꽃), JVM(땅)

*JRE(Java Runtime Environment)
	자바 실행 환경
	JVM을 생성해주는 부분,
	"JVM에서 실행할 때 필요한" "라이브러리 파일들"과 "기타 파일"들을 포함
	흙, 햇빛, 물, 공기, ... (환경)

*JDK(Java Development Kit)
	자바 개발 도구
	자바 프로그램을 생성할 때 도움이 되는 것들
	"JRE 외에도 개발에 필요한 도구"들을 가지고 있다. 
	자원, 삽, 비료, ... (부가적인 것들)

*JAVA 설치
	jdk 17 download 
	x64 MSI Installer
	https://www.oracle.com/kr/java/technologies/downloads/#jdk17-windows

*통합 개발 환경(IDE) - eclipase 설치 (설치 이유: 무료)
	eclipase 2022-12 (4.26)
	Eclipse IDE for Enterprise Java and Web Developers
	https://www.eclipse.org/downloads/packages/release/2022-12/r

압축파일 풀기 -> 반디집 이용

설치, 무설치 버전
무설치 버전 장점 
	여러개 설치 가능
	Spring용 ~용 으로 작업마다 가능
	D:\09_KUJ\1_java\resource

*자바 프로그램의 구조
	프로젝트
		패키지
			클래스 - 맨 앞글자가 대문자
				메소드 - 이름 뒤에 소괄호가 옴
					소스코드

----------단축키----------
- Alt Shift N 
- Alt 밑줄
- Ctl N new창 > pakage, class, ... 

자바 프로젝트의 최상위 폴더 src

* { } 
	영역, 바디Body
	해당하는 클래스, 메소드 등의 영역을 나타낸다.
	* 현재 선언 중임을 나타낸다. 
	public class PrintTest1 { 
		PrintTest1 의 영역
	}

*주석
	해석하고 싶지 않은 문장 앞에 사용한다.
	1. 소스코드에 설명하는 글을 달 때(개발자들간의 소통)
	2. 기존에 사용하던 코드를 더 이상 사용하지 않을 때

*값
	정보, 데이터, 상수, 리터럴

*출력
	사용자에게 값을 보내어 표현해주는 행위
*출력 메소드
	System.out
	
	.print(값)
	.println(값) - 줄바꿈 명령어
	.printf(서식문자열) f = format 서식

*제어문자
	출력을 제어해주는 문자
	\ 와 함께 쓰인다.
	따옴표 안에 존재한다. (' '. " ")
	\n : 줄 바꿈 문자
	\t : Tab
	\" : "
	\' : '
	\\ : \

*서식문자
	출력을 나타내는 서식(특)
	따옴표 안에 존재한다. ("")
	%와 함께 쓰인다.
	%d : 정수
	%s :  문자열
	%f :  실수
	%% :  %

데이터 "의미를 가지고 있는지" 사용할 만한 정보인지 여부

*변수
	변하는 값을 담는 저장 공간
	x                   =               3
	변수명              대입연산자           상수, 값, 리터럴
	오른쪽에 있는 값을 왼쪽의 공간에 넣어라!

*자료형
	bit : 0 또는 1을 담을 수 있는 "저장 공간의 최소 단위"
	byte : 8bit, 의미를 가질 수 있는 최소 단위, "데이터의 최소 단위"
	저장공간이나 값의 타입, 종류

	자료형	type	byte 	예시

	정수형	byte	1	-128 ~ 127
		short	2	-3만 ~ 3만
		int	4	-21억 ~ 21억
		long	8	너무 큼

	실수형	float	4	-58.14f, 0.0f, ...
		double	8 	-58.14, 0.0, ...
	문자형	char	2	'A', '0', '가', '\n', ...
	문자열	String	???	" ", "0", "가", Hello", ... 

*변수의 선언
	자료형 변수명 = 초기값;
	자료형 변수명;
	int x = 10;   // 선언
	x = 5;        // 사용

*변수 선언시 RAM
	int x = 10;
	x라는 이름의 저장공간에 RAM에 할당되고, 10이라는 값이 들어간다. 
	공간이 만들어졌으므로 주소값이 부여되지만 알 수없다. 

*변수 선언시 주의사항
	같은 구역에 같은 이름의 변수를 선언할 수 없다. 
	초기화를 해준다. (초기값을 넣어준다)
	되도록 선언부(구역의 상단부)에 한꺼번에 선언한다. 

*변수의 사용
	이미 선언된 변수의 변수명을 그대로 사용한다. 
	int data = 10;

	data = 5;	(공간을 사용) - 대입연산자로 구분 가능
	println(data);	(값을 사용) 

*변수의 사용이유
	1. '반복되는' '같은 의미'의 값을 쉽게 관리하기 위해서
	2. 의미가 없는 값에 의미부여를 하기 위해서(변수명도 나름 중요)

*변수명 주의사항
	숫자는 맨 앞에 쓸 수 없다. (1num -> num1)
	예약어는 쓸 수 없다. (class, public, int, ,,,)
	특수문자는 쓸 수 없다. 
	공백은 쓸 수 없다.
	_(언더바)는 사용 가능하다.
	카멜 표기법
	되도록 소문자로 사용한다. (시작은 무조건 소문자로)
	되도록 한글은 사용하지 않는다.
	뜻이 있는 명사형 단어를 사용한다. 

. (하위 연산자)
	A.b : A 안의 b , A의 b


입력
	사용자가 자신이 알고 있는 데이터를 넘겨주는 행위

입력 상태
	커서가 깜빡이면서 값이 들어오기를 기다리는 상태
	값이 입력되지 않으면 다음으로 진행이 불가하다.
	
	개발자가 할 수 있는 일은 사용자에게 입력상태로 만들어 주는 것 까지이다. 
	아래 코드들은 값을 입력했다고 가정하고 작성한다. 
	
입력 메소드
	Scanner sc = new Scanner(System.in);
	sc.next()
	sc.next()

next()
	사용부분 통째로 사용자가 입력한 문자열 값
	공백 또는 엔터를 구분점으로 판단하고 분리하여 입력받는다.
	홍 길동 : "홍",  "길동" 로 분리하여 "홍" 만 입력받는다. 

nextLine()
	

nextInt()



Scanner sc = new Scanner(System.in);
System.out.print("이름 : ");
String name = sc.next();
System.out.println(name + "님 어서오세요~");


사이트 추천
코드업