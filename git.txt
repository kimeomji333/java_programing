24-07-18 목요일
Git
	버전관리 시스템(여러 파일들을 하나의 버전으로 묶어서 관리하는 것)의 종류

버전관리 시스템의 종류
	클라이언트 - 서버 모델
		하나의 중앙 서버에서 여러 클라이언트들이 각자 필요한 데이터만 가져와서 작업을 하고 
		다시 중앙 서버로 보내서 통합하는 방식
		CVS, SVN

	분산 모델
		하나의 중앙 서버가 존재하지만 여러 클라이언트들은 각자의 컴퓨터 저장소에 
		전체 사본을 가지고 작업하는 방식
		Git

Git의 장점
	동시에 작업하는 사람들과 소스코드를 주고받을 필요가 없음
	같은 파일을 여러명이 동시에 병렬 개발이 가능
	변동 과정을 체계적으로 관리할 수 있고, 언제든지 지난 시점의 버전으로 되돌릴 수 있음
	인터넷이 연결되지 않은 곳에서 개발을 진행할 수 있고, 중앙 서버의 데이터가 유실되어도 다시 복구할 수 있음

Git 설치
	구글에서 git 검색
	cmd에서 git enter하면 잘 설치가 되었는지 확인 가능

작업
- add를 통해서 stating해서 올린다.
- stage

Git 명령어
	1. 우리 작업공간을 추적하는 Git 시스템의 로컬 저장소를 생성
		우리 작업공간으로 이동
			> cd D:/0900_KUJ
		로컬 저장소 생성
			> git init
		브랜치 확인(main)인지
			> git checkout -b main

	2. 작업(파일생성, 수정, 삭제 등)
		Git 시스템이 추적하지 못하는 새로운 파일들이 생겨날 것임

	3. 만들어진 작업된 파일들을 Git 시스템이 추적/관리할 수 있도록 추가(Stage에 올림)
		> git add 파일명		-> 해당 파일을 추가
		> git add . 		-> 모든 파일을 추가

	4. Stage에 올라와 있는 파일들을 묶어서 하나의 버전으로 만들기
		> git commit -m "커밋 메세지"

		Author identity unknown 문제 발생시
		> git config --global user.email "깃허브에 사용할 이메일"
		> git config --global user.name "이름"

	5. 로그 확인하기
		> git log
	
	현재 git 시스템의 상태 확인
		> git status

git init

git checkout -h (h는 힌트)

git -b <branch> - 브랜치를 만들고 변경을 한다.
git chechout -b main - 브랜치를 main으로 변경함.

git status

git add . - 버전으로 관리하기 전에 staging 되어있음

git config --global user.email "깃허브 가입 이메일 적기" -컴퓨터 모든 계정에 설정
git config --global user.name "이름적기"

git commit -m "first commit"




Github
	git으로 버전관리한 코드를 올릴 수 있는 클라우드 서비스
	단순한 저장만 하는 것이 아니라 유저들과 함께 코드를 공유하고
	온라인으로 하나의 프로그램을 같이 제작할 수 있게 만듦
	https://github.com

Github 저장소 만들기
	6. 왼쪽 메뉴의 create repository 버튼 클릭

Github 저장소에 업로드하기
	7. 원격 저장소(Repository)와 연결하기
		> git remote add origin 레포지토리 주소
	8. 만든 커밋(버전) github에 올리기
		> git push -u origin 브랜치명

Github 저장소에서 바뀐 내용 가져오기
	> git pull origin main

Github 저장소에서 복사본 가져오기
	> git clone 레포지토리주소

Github 연결 끊기
	> git remote remove origin
