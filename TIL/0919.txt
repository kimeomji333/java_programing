JSON.parse()
    JSON 형식의 문자열을 JavaScript 객체로 변환하는 데 사용

    - 문자열을 객체로 변환
        const jsonString = '{"name":"John","age":30}';
        const obj = JSON.parse(jsonString);
        console.log(obj.name); // "John"


서버와 클라이언트 간의 데이터 통신
    - 데이터 전송
        서버에서 클라이언트로 JSON 형식의 데이터를 전송할 때, 문자열로 변환하여 전송한다.
    - RESTful API 
        JSON을 데이터 포맷으로 많이 사용된다. 
        클라이언트가 서버에 요청을 보내면 
        서버는 JSON 형식으로 응답하고, 클라이언트는 이를 파싱하여 사용한다.

    서버에서 JSON 형식으로 응답하고 클라이언트는 파싱해서 사용한다.
    파싱한다는 것은 JSON 문자열을 JavaScript 객체로 변환하는 것
    객체로 변환해야 데이터를 손쉽게 다룰 수 있다. 

    복잡하게 문자열 형태로 변환하는 이유는?
        데이터의 일관된 형식으로 전송하기 위함.
        문자열 형태로 전송하는 것은 서로 다른 프로그래밍 언어나 환경에서도 호환성을 유지하기 쉽다.


JSON.parse() vs. JSON.stringify()
    JSON.parse()
        JSON 문자열을 JavaScript 객체로 변환
        서버에서 전송된 JSON 데이터를 JavaScript에서 사용하기 위한 작업
        JSON 문자열을 파싱하면 해당 데이터를 손쉽게 다룰 수 있다.
        역직렬화: 사용할 수 있는 상태로 만드는 것

    JSON.stringify()
        JavaScript 객체를 JSON 문자열로 변환
        JavaScript 객체를 서버로 전송하거나 로컬 저장소에 저장하기 위해 필요한 작업
        직렬화: 전송할 수 있는 상태로 만드는 것


Mapping할 때 속성 설정?
    받고 싶은 데이터를 강제를 함으로써 오류상황을 줄일 수 있다.

    Media Tpyes
    - consumes
        들어오는 데이터 타입을 정의
        
        @PostMapping(path = "/juice", consumes = MediaType.APPLICATION_JSON_VALUE)
        public void addJuice(@RequestBody Juice juice){}

        -> 해당 uri를 호출하느 ㄴ쪽에서는 헤더에 보내는 데이터가 json이라는 것을 명시해야 한다.
        Content-Type:application/json

    - produces
        반환하는 데이터 타입을 정의

        @GetMapping(path = "/juice/{juiceId}", produces = MediaTpye.APPLICATION_JSON_VALUE)
        @ResponseBody
        public Juice getJuice(@PathVariable String juiceId){}


직렬화와 역직렬화
    직렬화
        객체들의 데이터를 연속적인 데이터로 변형하여 전송 가능한 형태로 만드는 것
        객체 데이터를 통신하기 쉬운 포맷 형태로 만들어주는 작업

    역직렬화
        직렬화된 데이터를 다시 객체의 형태로 만드는 것
        포맷 형태에서 객체로 변환하는 과정

        포맷(Byte, CSV, JSON, ...)

    직렬화가 필요한 경우
        자바에는 원시타입이 8개, 그 외에는 주소값을 갖는 참조형 타입

        원시타입은 stack에 값 그 자체로 가지고 있어 외부로 데이터 전달 시에 일정한 형식의 raw byte 형태로 변경하여 전달할 수 있다. 

        객체의 경우 실제로 Heap 영역에 존재하고, Stack 영역에 객체의 주소(메모리 주소)를 가지고 있다.

        주소값의 데이터(실체)를 원시한 값 형식 데이터로 변환하는 작업을 거친 후 전달해야 하기 때문
        그래야 파일 저장이나 네트워크 전송시 파싱 할 수 있는 유의미한 데이터가 된다. 


흐름을 먼저 살펴보자.
0. DB 설계
1. 설정
    application properties
        - mybatis
            config, mapeer-location
        - datasource (MySQL)
            driver-classpname, url, username, pw
        - thymeleaf
        - error page
        - files
2. mapper 경로
    - resource > mapper folder > xml 파일
        namespace로 class 경로지정
            com.example.demo.mapper.UserMapper
    - mybatis-config.xml 설정
        기본적인 CRUD
            - insert id="insertUser"
            - select id="getUserByUserid"
            - update id="updateUser"
            - delete id="deleteUser"
3. Mapper interface 만들기
    - namespace 경로에 맞게 맞게 
    - Spring 이 인식할 수 있도록 @Mapper 
    = int insertUser(UserDTO user);
4. DTO 
    - @Data(getter, setter 필요)
    - DB 필드명과 같게 + 알파
    - ex. private String userid;
          private boolean isNew;
+ 여기서 mybatis가 주입이 잘 되었는지 test 해볼 수 있음
5. Service, ServiceImple로 인터페이스와 구현체 분리
    - interface 로 
        user에 어떤 기능을 넣을 건지
        boolean join(UserDTO user)
    - 구현체로 
        - interface를 implements
        - Mapper 주입
        - 오버라이드
        - 데이터 로직
6. Controller
    - HomeController
    - 각 entity의 controller 들
        API 명세서를 통해
    - Service 주입
    - service.checkId(userid) 등
        service 메서드 만들기


팀프로젝트 4주
9/19 ~ 10/18에 발표
- 기획
    기획 ppt 만들어서 제출(기획서 제축)
    프로젝트 기획
    erd 설계
    flow 차트?
    
    팀 소개, 팀원 소개(_업무 분담)
    프로젝트 소개
        주제 선정 이유
        주 타겟층
        프로젝트 명에 대한 설명
        로고, 디자인, 주 레이아웃 등(색상 이유, 레이아웃 주된 형태, ..)
    개발 환경(기술스택)
        협업툴, 개발툴, 구성언어 등
        어떤 것으로 만들것인지
        spring...
- 발표 ppt  
    타임 테이블(언제부터 언제까지 뭘했는지 도식화)
    플로우 차트(메인부터의 순서도)
        구조 다이어그램
        행위 다이어그램
        ERD
        스토리보드

    주요 기능 소개(이 기능만큼은 꼭 소개하고 싶다)
    주요 화면 소개(이하동문)
    q&a, 소감(트러블 슈팅) - 포폴에 사용 가능

브레인스토밍
- 사진 업로드
- 

프로젝트 개요
밴치마킹 레퍼런스
    서비스에서 어떤 부분이 부족해서 만들고 싶을까, 
    요즘 사회적으로 유행/문제가 무엇일까, 
    세대 관심사에 따른 기능들
    로고 선정 이유와
    색 선정 이유

플로우차트
프로세스 
스토리보드
디자인 정의






Service와 ServiceImple 구조 사용하는 이유
    코드의 유연성과 확장성이 증가하여 유지보수성이 향상되기 때문이다.
    - Service interface는 비즈니스 로직을 담당
    - ServiceImpl은 인터페이스를 구현하여 실제 로직을 처리



회의
조장 정하기
아이디어 선정
