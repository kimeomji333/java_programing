댓글 수정

댓글 삭제


@PUT vs. @PATCH
    PUT
        자원의 전체 수정 
        모든 데이터들을 다 전달, 전달된 자원의 필드 중 비어있는 것이 있다면 DB상의 데이터도 NULL로 변화 
    PATCH
        자원의 일부 수정
        수정할 필드의 값만 전달


file 전송
    설정 application-properties
        #files
        spring.servlet.multipart.max-file-size=2GB
        spring.servlet.multipart.max-request-size=3GB   // 총 보내는 최대 사이즈
        file.dir=D:/0900_KUJ/6_spring/file/             // 문자열을 변수처럼 만듦

            multipart
                문자열 + 파일 데이터 전송

    write.html > form 태그에 특정 속성 추가
        enctype="multipart/form-data"
        -> 이 설정을 사용하면 폼 데이터의 인코딩 방식이 바이너리로 변경되어 서버에서 파일 업로드를 처리할 수 있다.

    BoardServiceImpl
        전역변수로 선언. 저장된 경로 문자열을 받아서 사용 가능
        @Value("${file.dir}")       // 롬복아님. bean factory 
        private String saveFolder;
    

file에 변화(change)가 일어나는 경우 3가지
    - 있다가 없어진
    - 있다가 바뀐
    - 없다가 있어진


FileReader
    파일 객체를 읽어올 수 있다.
        reader.readAsDataURL(file) 
            파일을 읽어서 URL화 시킨다.
        img.setAttribute("src", ie.target.result);
            읽은 대상의 결과를 src에 넣는다.


이스케이프 문자
    \n      줄바꿈
    \[      비출력문자열 시작              
    \]      비출력문자열 종료


MyBatis에서 <![CDATA[]]> 를 사용하는 이유
    CDATA = Character DATA 로 문자형 데이터이다.

    <![CDATA[]]> 선언하고 안에 문자열을 채워 넣으면, [] 안에 있는 문장은 파싱되지 않고 그대로 문자열로 출력된다.

    마이바티스에서 매퍼 파일은 XML 로 작성되어 있고,
    SELECT문에는 조건을 걸어 쿼리를 하기 위해 <,>,= 등의 기호를 많이 사용하는데, 이것이 파싱 중에 태그로 인식되거나 하는 등의 문제가 생길 수 있다.


jQuery > .appendTo()
    .append() vs. .appendTo()
    $(A).append(B) // A 사이의 마지막에 B 가 추가 된다.
    $(A).appendTo(B) // A 가 B 사이의 마지막에 추가 된다. 해당 선택자의 마지막 자식으로 jQuery 객체 추가


UUID(Universally Unique IDentifier, 범용 고유 식별자)
    네트워크 상에서 고유성이 보장되는 id를 만들기 위한 표준 규약

    128비트의 숫자이며, 32자리의 16진수로 표현된다.
    8자리-4자리-4자리-4자리-12자리 패턴으로 하이픈을 집어 넣어 5개의 그룹으로 구분