동기, 비동기 통신
    javascript는 싱글 스레드로 작동하기 때문에, 효율적인 프로그램을 만들기 위해서는 비동기 처리를 적절하게 사용하는 것이 중요하다. 

    이거 읽어보기 <주니어 웹 개발자가 알아야 할 비동기 통신>
        https://yozm.wishket.com/magazine/detail/1982/


Ajax 통신
    Ajax는 순수 자바스크립트로 작성하는 것보다 제이쿼리(자바스크립트의 라이브러리)로 작성하는 것이 더 쉽다.

    Ajax (Asynchronous JavaScript and XML)
        javascript를 이용하여 비동기적으로 서버와 데이터를 주고 받는다.
        화면의 일부만 갱신해서 동적 페이지를 만들어준다. ex. 인스타그램의 스크롤

    제이쿼리 기능이므로 CDN 추가
        <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>

    Ajax 는 XMLHttpRequest 객체를 통해 서버에 request한다.
        JSON이나 XML 형태로 필요한 데이터만 받아 갱신하기 때문에 자원과 시간을 아낄 수 있다.

    -> 그 전에는 어떤 내용으로 Ajax를 이용했는가?
        

    -> 오늘 배운 내용
        jquery를 이용한 Ajax 사용
            Ajax 문법
                $.ajax({
                    type : 'post',           // 타입 (get, post, put 등등)
                    url : '/test',           // 요청할 서버url
                    async : true,            // 비동기화 여부 (default : true)
                    headers : {              // Http header
                    "Content-Type" : "application/json",
                    "X-HTTP-Method-Override" : "POST"
                    },
                    dataType : 'text',       // 데이터 타입 (html, xml, json, text 등등)
                    data : JSON.stringify({  // 보낼 데이터 (Object , String, Array)
                    "no" : no,
                    "name" : name,
                    "nick" : nick
                    }),
                    success : function(result) { // 결과 성공 콜백함수
                        console.log(result);
                    },
                    error : function(request, status, error) { // 결과 에러 콜백함수
                        console.log(error)
                    }
                })

            type : GET 또는 POST 지정
            url : ajax로 요청할 대상 URL 지정
            async : 동기, 비동기 지정(boolean)
            dataType : 받아올 테이터의 자료형 지정
            data : 요청 할때 보낼 데이터 지정
            success : ajax 요청 성공시 실행할 이벤트 지정 (function, array)
            error(xhr, status, error): ajax 요청 실패 시 실행할 이벤트 지정(function)
            complete : ajax 요청 완료시 실행할 이벤트 지정(function)

        
        Ajax를 이용해서 GET, POST, PUT, DELETE 요청을 한다.

        공부하고 다시 읽어보기 <Ajax를 이용해서 GET, POST, PUT, DELETE 요청 해보기>
            https://velog.io/@merci/JS-%EA%B0%84%EB%8B%A8%ED%95%9C-ajax
        
    
제이쿼리 jquery
    자바스크립트 라이브러리
    뛰어난 DOM 구조 탐색, 자기 자신을 나타내는 $(this), 특정 요소를 모두 가져오는 $("element name") 등 과 크로스 브라우징으로 호환성 문제 해결을 위해 사용된다.


DOM
    문서 객체 모델
    단순 텍스트로 이루어진 HTML 문서를 객체 모델로 나타내어,
    객체 지향 프로그래밍이 객체 모델(웹 페이지)을 접근해서
    문서 구조, 스타일, 내용 등을 변경할 수 있도록 API를 제공하는 인터페이스 

    javascript 같은 스크립팅 언어가 쉽게 웹 페이지에 접근하여 조작할 수 있게끔 연결시켜주는 역할을 담당

    1. DOM은 웹 페이지의 객체 지향 표현이다.
        주어진 HTML 코드를 바탕으로 객체 모델로 나타내는데 그 객체 모델을 "노트 트리"로 표현된다.
        부모 줄기가 여러 자식 나뭇가지를 가지고, 그 자식 나뭇가지는 여러 나뭇잎을 가진 듯한 모습

        <html lang="en">
            <head>
                <title>My first web page</title>
            </head>
            <body>
            </body>
        </html>

    2. DOM은 웹 페이지(일종의 문서, Document)를 표현, 저장, 조작하는 방법을 제공한다.
        주로 js를 이용해 DOM을 조작한다. 다른 객체 지향 언어로도 접근 가능.

    웹페이지를 계층적 구조와 정보로 표현하여, 이를 제어할 수 있는 프로퍼티와 메서드를 제공하는 트리 자료구조이다.
    - document node(문서 노드) 
        최상위 루트 노드
        document 객체를 가리킨다.
        window 객체의 document 프로퍼티로 바인딩(연결)이 되어 있어 window.document, document로 참조해 사용할 수 있다.
    - element node(요소 노드)
        모든 HTML 요소 (body, h2, div) 노드
        속성 노드를 가질 수 있는 유일한 노드
        부모-자식 관계를 가지게 되기 때문에 계층적 구조를 이룰 수 있다.
    - text node(텍스트 노드)
    - attribute node(속성 노드)

    DOM의 DataType
    DOM 객체의 구성 요소
        - 프로퍼티      : 돔객체의 멤버 변수. HTML 태그의 속성을 반영 
        - 메소드        : 돔객체의 멤버 함수. HTML 태그를 제어
        - 컬렉션        : 돔객체의 모든 자식돔객체에 대한 주소를 가짐
        - 이벤트 리스너  : HTML 태그에 작성된 이벤트 리스터들(onclick, onchange 등)을 그대로 가짐
        - 스타일        : 이 프로퍼티를 통해 HTML 태그에 적용된 CSS 스타일 시트에 접근 가능

    javascript DOM 접근 메서드
        - document.querySelector(selectors)
        - document.getElementById(id)
        - element.innerHTML
        - element.addEventListener(type, listener)
        ...

    노드 생성
        const div = document.createElement('div')
        div라는 변수에 div 노드를 만들어 할당한 상태
        div 변수를 호출하면 div 태그가 뜬다.
        화면에 실제 적용시키려면, append(), appendChild() 메소드를 사용하여 화면에 붙여야 한다.

    노드 붙이기
        div 태그를 붙이기 위해서 부모 노드에 먼저 접근해야 한다.
        부모 노드로 다른 태그가 존재하지 않는다면 body 태그가 부모 태그이다.
        document.body.append(div);

    노드 변경
        노드 내부에 어떤 변경이 일어나 업데이트를 진행하고 다시 렌더링하는 과정으로
        요소 노드 내부에 textContent 프로퍼티를 사용하여 text를 집어넣는다.
        div.textContent = 'codingIsSoFunny!';

    노드 삭제
        remove()는 이어붙이는 메소드와 달리 부모 태그에 접근 하지 않는다. 
        div.remove();
        document.body.removeChild(div);


Pagination 구현을 위한 값 계산
    총 페이지 수 = Math.ceil(전체 컨텐츠 개수 / 한 페이지에 보여주고자 하는 컨텐츠의 개수)
        ex. 전체 컨텐츠 개수가 124개 이고, 한 페이지에 10개씩 보여주고자 하면 => 총 페이지의 수는 13 페이지가 필요하다.
        총 페이지 수 = Math.ceil(124 / 10) = 13

    화면에 보여질 페이지 그룹 계산
        페이지 그룹이란? 어떤 페이지 번호가 속한 그룹의 값
        1 페이지 그룹 : 1 2 3 4 5 
        2 페이지 그룹 : 6 7 8 9 10
        ...
        = Math.ceil(현재 페이지 번호 / 한 화면에 보여질 페이지 개수)
            ex. 현재 페이지 번호가 8페이지이고, 한 화면에 보여질 페이지의 개수가 5개라면 => 한 화면에 보여질 페이지 그룹 = Math.ceil(8 / 5) = 2

    ???


댓글 구현


REST API
    하나의 URI는 하나의 고유한 자원을 대표한다. 
    자원을 이름으로 구분하여 해당 자원의 상태를 주고받는 것을 의미한다.
    (자원의 표현에 의한 상태 전달)

    POST        Create
    GET         Read
    PUT/PATCH   Update
    DELETE      Delete

    -> 이것 2개만 기억하기 !
        첫 번째, URI는 정보의 자원을 표현해야 한다.
        두 번째, 자원에 대한 행위는 HTTP Method로 표현한다.


DOM과 Ajax 공부 후에 다시 보기
    html 에서 DOM을 구현하고
    JS에서 ajax 통신 성공시

    insert(data, (alert창 띄워주는)함수 넘겨줌)
    js파일에서 ajax 통신으로 data, callback 함수 받아서 ajax 통신으로 성공시에 함수 호출

    ajax 객체 하나를 넘겨줌
    $.ajax({
        type : 전송방식POST
        url : /reply/regist
        data : JSON.stringify(reply) reply 객체를 문자열화
        contentType : application/jsonlcharset=utf-8
        success:function(){
            callback();
        }
        error:function(){
            err();
        }
    })


@RestController
    = @Controller + @ResponseBody
    JSON 형태로 객체 데이터를 반환한다.
    데이터 응답으로 제공하는 REST API 개발할 때 주로 사용하며, 객체를 ResponseEntity로 감싸서 반환한다.
    리턴마다 RequestBody를 붙여주게 된다.


@RequestBody : 넘겨지는 body의 내용을 해석해서 해당 파라미터에 채워넣기
    post 방식의 전송은 RequestBody에서 해석해서 받아야 한다.


@RequestBody vs. @ResponseBody
    웹에서 화면전환(새로고침) 없이 이루어지는 동작들은 대부분 비동기 통신으로 이루어진다.

    클라이언트에서 요청을 보낼 때, 본문(body)에 데이터를 담아서 보내야하고
    서버에서 응답을 보낼 때, 본문(body)에 데이터를 담아서 보내야 한다. 

    body에 담기는 데이터 형식은 대표적으로 JSON이다. 
    
    클라이언트에서 전송한 XML, JSON 등 데이터를 컨트롤러에서 DOM 객체나 자바객체로 변환해서 송수신 할 수 있다.

    @RequestBody : HTTP Request body -> 자바객체로 변환 해서
            매핑된 메소드 파라미터로 전달해준다.
            @PostMapping("regist")
            public ResponseEntity<String> regist(@RequestBody ReplyDTO reply) {
                ...
            }

    @ResponseBody : 자바객체 -> HTTP Response body로 변환 해서
            매핑하여 클라이언트로 전송
            @GetMapping("checkId")
            @ResponseBody
            public String checkId(String userid) {
                if(service.checkId(userid)) {
                    return "O";
                }
                else {
                    return "X";
                }
            }
        

ResponseEntity<>
    서버의 상태 코드, 응답 메세지, 응답 데이터 등을 담을 수 있는 타입. 

    Controller에서 성공이라는 상태 코드를 ajax로 보내줘야 함
    return new ResponseEntity<>(HttpStatusCode.valueOf(200)) 의 객체를 보내줘야함
    -> 코드를 잘 모르니깐
    enum class 사용하길 추천 HttpStatus.OK

    ResponseEntity를 쓰는 이유
        Controller에서 객체를 return 하는 경우 HTTP 응답을 제어할 수 없기 때문이다.
        REST API로 만든다면 클라이언트와 서버 간의 통신에 필요한 정보를 제공해야 하는데
        적절한 상태코드와 응답 헤더 및 응답 본문을 생성해서 전달할 수 있다.

    ex.
        @GetMapping("/")
        public ResponseEntity<User> getUser() {
            User user = userService.getUser();
            return ResponseEntity.ok(user);
        }

    ResponseEntity 잘 쓰는 방법
        Return은 생성자보다는 빌터 패턴 사용
            - 생성자 패턴
                return new ResponseEntity(body, headers, HttpStatus.valueOf(200));
            - 빌더 패턴
                return ResponseEntity.ok()
                    .headers(headers)
                    .body(body);


@PathVariable
    경로 변수( {id} 중괄호에 둘러싸인 값 )를 표시하기 위해 매개변수에 사용된다.
    
    URL 경로에서 변수값을 추출하여 매개변수에 할당한다.
    /localhost:8080/reply/121/2

    @GetMapping("/{boardnum}/{pagenum}")
	public ResponseEntity<ReplyPageDTO> list(
			@PathVariable("boardnum") long boardnum,
			@PathVariable("pagenum") int pagenum
	) {
		Criteria cri = new Criteria(pagenum,5);
		return new ResponseEntity<>(service.getList(cri,boardnum),HttpStatus.OK);
	}


HTML 문자엔터티
    &lt;
        < (부등호 꺽쇠)
    &gt;
        > (부등호 꺽쇠)
    &nbsp;
        ''(공백, Space 한칸)
    &amp;
        &(앰퍼샌드)
    &quot;
        "(큰따옴표 하나)
