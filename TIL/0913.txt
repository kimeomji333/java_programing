코딩테스트 새로 배운 내용 어떻게 정리할 수 있을까?


스프링과제 4주, 포폴 퀄리티로 뽑아낼 수 있는 기간
    주제가 뭐가 있을까?
    - 사용하고 싶은 기능이 있는가?
        사진업로드, 댓글, 좋아요? 인기게시글, 
    - 평소에 만들어보고 싶은 서비스가 있는가?


데이터 패킷
    데이터 통신에서 통신망을 통하여 하나의 장치에서 다른 장치로 블록으로 송신되는 정보의 단위


Socket과 WebSocket
    Socket
        프로그램이 네트워크에서 데이터를 주고받을 수 있도록 네이트워크 환경에서 연결할 수 있게 만들어진 연결부
        컴퓨터와 컴퓨터 사이의 통신을 위한 통로
        TCP/IP

    WebSocket
        소켓 위에 구축되어 웹 클라이언트와 서버 간의 실시간 전이중 통신을 위한 상위 수준 프로토콜을 제공
        HTTP 레이어에서 동작(HTTP를 사용해 연결을 시작하고 그 후에는 TCP를 사용함)

        동작 방식
            접속까지는 HTTP 프로토콜을 이용하고 그 이후의 통신은 자체적인 WebSocket 프로토콜로 통신하게 된다.

            소켓 연결하기 위해 핸드쉐이킹이 필요하다. HTTP or HTTPS 프로토콜을 통해 이뤄진다.
            - 클라이언트의 요청 헤더
            - 서버의 응답 헤더

            프로토콜이 ws, wss(WebSocket)으로 변환되면 frame을 사용하여 데이터를 교환할 수 있다.

            * Frame
                WebSocket의 데이터 교환에서 사용되는 가장 작은 단위의 데이터
                헤더와 페이로드(전송되는 실제 데이터)로 구성되어 있다.


채팅 구현
    어떻게 운영되는지 정도로만 알아두기
    
    소켓 통신
        클라이언트가 서버에게 요청보내면 응답하던 기존과 달리
        연결된 채로 클라이언트/서버 측에서는 메세지 언제든지 받을 수 있는 리스닝 상태로 소통하는 것

    html > new = WebSocket('연결할 주소') 로 웹소켓 객체 만듦
    
    서버 >
        1. WebSocketConfig - 설정 필요
            
            @Configuration  //스프링이 관리
            public class WebSocketConfig {
                @Bean
                public ServerEndpointExporter serverEndpointExporter() {
                    return new ServerEndpointExporter();
                }
            }
                
            ServerEndpointExporter
                Endpoint를 배포해주는 메소드를 만듦

                Spring에서 Java EE/Jakarta EE 웹소켓을 지원하기 위해 사용하는 클래스로 웹소켓 엔드포인트를 등록하고 관리하는 역할을 한다.

                @ServerEndpoint 로 정의된 웹소켓 엔드포인트를 자동으로 등록
            

        2. Controller
        
            @Component
            @ServerEndpoint(value = "/chat/{userid}")  //마지막 도착하는 곳
            public class ChatController {
                private static Set<Session> clients = Collections.synchronizedSet(new HashSet<>());
                private static Map<Session, String> clients_id = Collections.synchronizedMap(new HashMap<>());
                
                @OnMessage
                public void onMessage(String message, Session session) {
                    ...
                }
                @OnOpen
                public void onOpen(Session session, @PathParam(value="userid")String userid) {
                    ...
                }
                @OnClose
                public void onClose(Session session) {
                    ...
                }
            }


@PathParam


Cross-platform WebSocket API인 Socket.io   


두 가지 방법
    - messageDTO 
    - in: out: 해서 split으로 잘라서 조건문 통한 방법


여러개의 채팅방을 만드려면
    클라이언트들은 서버에 접속하면 개별의 WebSocket session을 가지게 되는데
    채팅방 입장시 session 정보를 채팅방에 맵핑시켜 보관하고 있으면
    서버에 전달된 메세지를 특정 방의 session으로 보낼 수 있다. 


자바 컬렉션과 동기화
    동기화 Synchronization 는 작업들 사이의 수행 시기를 맞추는 것
    자바에서 컬렉션의 구현 클래스를 사용할 때 동기화가 중요한 이슈가 될 수 있다. 
    무조건 좋은 것이 아니라 실행 속도 측면에서 성능 차이가 있기 때문에 상황에 따라 적절하게 사용하는 것이 좋다.

    채팅 구현에서 Session 관리와 동기화를 위한 코드로
        - 여러 클라이언트가 동시에 연결될 수 있도록 동기화하여 clients Session 중복 제거
            private static Set<Session> clients = Collections.synchronizedSet(new HashSet<>());
        - clients Session 과 clients_id 간의 매핑
            private static Map<Session, String> clients_id = Collections.synchronizedMap(new HashMap<>());


배포 
    Run As > 메이븐 빌드
    배포 설정 > pakage, pom.xml 지우기, 테스트 클래스 실패되는 것들
    workspace > target > jar 파일 생김
    cmd 실행 > java -jar 파일명


Nginx란 무엇인가?
    웹 서버. Apache 같은 웹 서버와 비교하면 더 빠르고 가볍고, 대규모 애플리케이션 처리에 적합하다.


@EnableWebSocket과 @ServerEndpoint
    구글에 EnableWebSocket 어노테이션이 많이 보이실래, 배운 ServerEndpoint와 다른 점을 찾아봄

    @EnableWebSocket 접근 방식
        Framework Integration
            Spring의 웹소켓 지원 기능을 통해 웹소켓을 구현
            Spring의 WebSocketConfigurer를 사용해 웹소켓 핸들러를 구성하고
            Spring의 @Controller나 @RestController와 함께 사용할 수 있다.
        
        Configuration
            WebSocketConfigurer를 구현하여 웹소켓 핸들러를 등록해야 한다.

        예시 코드 
            @Configuration
            @EnableWebSocket
            public class WebSocketConfig implements WebSocketConfigurer {

                @Override
                public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {
                    registry.addHandler(new MyWebSocketHandler(), "/ws/my-endpoint").setAllowedOrigins("*");
                }
            }


            public class MyWebSocketHandler extends TextWebSocketHandler {
                // Implement WebSocket logic here
            }
    

    @ServerEndpoint
        Java EE / Jakarta EE Standard
            웹소켓 API의 일부로, Spring Boot와 독립적으로 사용된다.

        Configuration
            별도로 웨소켓 핸들러를 등록할 필요 없다. 
            이 어노테이션을 통해 웹소켓 엔드포인트를 직접 정의한다.

        예시 코드
            @ServerEndpoint("/ws/my-endpoint")
            public class MyWebSocketEndpoint {

                @OnOpen
                public void onOpen(Session session) {
                    // Handle new connection
                }

                @OnMessage
                public void onMessage(String message, Session session) throws IOException {
                    // Handle incoming messages
                    session.getBasicRemote().sendText("Received: " + message);
                }
            }


스프링 끝