자주 사용하는 코딩테스트 문법 정리
    https://earthteacher.tistory.com/169#gsc.tab=0
    
String 관련 메소드
    String str = "apple";

    str.length();

    str.isEmpty();  //빈 문자열 체크

    str.charAt(0);                // 'a'  -> 문자 반환
    str.indexOf("a");             // 0  -> 인덱스 반환
    str.lastIndexOf("p");         // 2  -> 마지막으로 문자가 속한 인덱스 반환

    str.substring(1,3);           // "pp"  -> 인덱스 1이상 3미만 위치의 문자열 반환
    str.substring(3);             // "app"  -> 인덱스 3미만 위치의 문자열 반환

    str.replace('p','e');         // "aeele"  -> 모든 기존문자를 바꿀문자로 치환
    str.replaceAll(".", "/");     // "/////"  -> 정규식에 맞춰 문자 치환
    str.replaceFirst('p', 'e');   // "aeple"  -> 여러 문자 중 첫번째만 치환

    str.equals("apple");

    문자비교
        str과 applf가 같으면 0
        str이 applf보다 사전순으로 앞으면 -1
        str이 applf보다 사전순으로 뒤면 1
        str과 applf가 마지막 문자만 다르면, 마지막 문자의 사전순 차이 반환
    str.compareTo("appel");       // -1

    str.comtains("app");

    str.split(" ");               // 공백으로 구분된 문자열 str을 분리하여 String[] 배열로 반환
    str.aplit();                  // 띄어쓰기 없는 문자열 str을 한 문자씩 분리하여 String[] 배열로 반환

    str.trim();                  

    Integer.parseInt("100");
    Integer.toString(100);


StringBuilder 관련 메소드
    String은 한번 만들어지면 문자를 추가하거나 삭제할 수 없으므로, 변경이 필요한 경우 사용한다.

    StringBuilder sb = new StringBuilder();

    sb.append("apple");

    sb.insert(2, "oo");     // "apoople"

    sb.delete(0, 2);        // "oople"

    sb.deleteCharAt(2);     // "oole"

    sb.setCharAt(1, 'p');   // "ople"

    sb.reverse();           // "elpo"

    sb.setLength(2);        // "el"

    sb.setLength(4);        // "el  "


List 관련 메소드
    List<String> list = new ArrayList<>();
    List<String> list2 = new ArrayList<>();

    list.add("one");
    list.add(0, "zero");
    list.addAll(list2);     // 리스트 병합

    list.indexOf("zero");   // 특정요소의 인덱스 반환
    list.lastIndexOf("zero");

    list.remove(0);
    list.remove("one");

    list.removeAll(list2);  // 차집합. list에서 list2에 있는 모든 값을 삭제
    list.retainAll(list2);  // 교집합. list에서 list2에 있는 값을 제외한 모든 값을 삭제

    list.clear();
    list.isEmpty();
    list.size();
    list.contains("one");
    list.containsAll(list2);    // list에 list2의 모든 값이 포함되어 있으면 true
    list.removeIf(x -> x % 2 == 0)  // list에서 짝수인 수를 모두 제거


Array to List / List to Array
    문자열 타입 배열을 List 로 변환
        String[] temp = {"apple", "banana", "lemon"};
        List<String> list = new ArrayList<>(Arrays.asList(temp));

    List를 문자열 배열로 변환
        List<String> list = new ArrayList<>();
        String[] temp = list.toArray(new String[list.size()]);

    정수 배열을 List로 변환
        int[] temp = {1,2,3,4};
        List<Integer> list = new ArrayList<>(Arrays.asList(temp));

    List를 정수 배열로 변환
        List<Integer> list = new ArrayList<>();
        int[] temp = list.stream().mapToInt(x -> x).toArray();


Collections 관련 메소드
    int[] temp = {1,2,3,10,20};
    List<Integer> list = new ArrayList<>(Arrays.asList(temp));

    Collections.max(list);
    Collections.min(list);

    Collections.sort(list);
    Collections.sort(list, Collections.reverseOrder());

    Collections.reverse(list);

    Collections.frequency(list, 3);     // List 내 원소의 갯수 반환

    Collections.binarysearch(list, 10);  // 10은 3번째 위치에 존재


Stack 관련 메소드
    Stack<Integer> stack = new Stack<>();

    stack.push(1);

    stack.pop();

    stack.clear();

    stack.size();
    
    stack.empty();

    stack.contains(1);

    stack.peek();       // 최상단 요소 확인


Queue 관련 메소드



HashSet 관련 메소드
    HashSet : 중복 허용 X, 순서 X
    LinkedHashSet : 중복 허용 X, 순서 O
    TreeSet : 중복 허용 X, 이진탐색트리 형태로 데이터 자장, 정렬 O

    HashSet<Integer> hs = new HashSet<>();
    HashSet<Integer> hs2 = new HashSet<>();
    
    

HashMap



