이전에는 서블릿을 컨트롤러로 하고, JSP를 뷰 영역으로 하는 자체적인 MVC패턴을 도입해보았으나, 문제점이 발생했다. 
공통 처리, 코드의 반복 작업 부분을 개선하기 위해서 <프론트 컨트롤러 패턴>이 필요해졌다. 

Front-Controller Pattern 이란?
	각 컨트롤러마다 공통으로 처리 가능한 로직들을 모다주는 문지기 역할을 수행하는 컨트롤러를 앞에 두고 
	각 나머지 컨트롤러는 뒤에 배치시키는 패턴이다.

	프론트 컨트롤러도 일종의 서블릿이다. 
	해당 컨트롤러 하나로 클라이언트의 모든 요청을 받아들인다. 공통 처리 이후 요청에 맞는 컨트롤러를 찾아서 호출한다.

	-> 스프링 MVC의 DispatcherServlet이 프론트 컨트롤러로 구현되어 있다.

			  HTTP 요청					 1. url 매핑 정보에서 컨트롤러 조회
	클라이언트 --------> 프론트컨트롤러 -------------> 매핑 정보
			 							2. 컨트롤러 호출			   HTTP 응답
			    					  -------------> 컨트롤러  -------> JSP  -------> 


Mapper는 무슨 역할을 할까?
	MyBatis는 매퍼 인터페이스를 제공한다. 
	Mapper를 사용하면 DAO를 만들지 않고 인터페이스만 이용해 편하게 개발 가능하다. 
	자바 코드와 SQL문(*.xml 형식)를 분리하여 편리하게 관리하도록 한다. 
	
	@Mapper 해당 인터페이스를 인식한다.
		-> namespace : 매퍼의 전체 경로를 지정
		-> id : 매퍼 인터페이스와 해당 파일을 매칭 시키기 위해 - 매퍼 인터페이스의 메서드명과 동일하게 작성
		-> resultType : 결과값 형식 지정

데이터베이스 프레임워크로 가장 많이 쓰이는 기술이 ‘Mybatis’와 ‘JPA’이다.
데이터베이스 접속을 편하게 사용하기 위해 'SQL Mapper 기술'과 'ORM 기술'이 제공된다. 
	- SQL Mapper 기술(개발자가 작성한 SQL 실행 결과를 자바 객체에 매핑시킴) - MyBatis
	- ORM 기술(SQL문 자동 생성해주고 자바 객체와 DB의 데이터(DB엔티티(테이블))를 자동으로 매핑시킴) - JPA(Java Persistence API)
	두 가지 기술 모두 데이터를 관계형 데이터베이스에 저장(즉, 영속화)시킨다는 측면에서는 동일, 서로 다른 접근 방식을 채택하는 것

+ JPA의 ORM 매핑 과정
	DB 테이블에 영속화되고, 영속화된 데이터가 다시 Java 객체로 변환하는 과정. 
	즉, 자바객체를 DB 테이블로 자동 영속화 시켜주는 기술을 의미
	
	ORM 기술을 실제 구현해서 만들어진 프레임워크가 Hibernate이다. 

			Java 클래스						DB 테이블
			---------  	 영속화	    DB저장	---------  
			Student		----->     ----->	Student	
							   ORM
						<-----	   <-----
						객체변환	DB조회

+ 두 기술 선택은 프로젝트 특성 등을 고려
	MyBatis는 복잡한 쿼리와 SQL 제어가 필요한 경우
	JPA는 간단한 매핑 및 객체 지향적인 접근이 필요한 경우


서블릿에 대해서 
	클라이언트의 요청 처리, 그 결과를 반환하는 Servlet 클래스의 구현 구칙을 지킨 자바 웹 프로그래밍 기술
	(자바를 사용하여 웹을 만들기 위해 필요한 기술!!! 요청/응답 다시 전송해주는 자바 프로그램!!!)

	서블릿 특징
		- 클라이언트 요청에 대해 동적으로 작동하는 웹 어플리케이션 컴포넌트(요소)
		- html을 사용하여 요청에 응답
		- Java Thread를 이동하여 동작
		- MVC 패턴에서 Controller로 이용
		- HTTP 프로토콜 서비스를 지원하는 javax.servlet.http.HttpServlet 클래스를 상속받는다.
		- UDP보다 처리 속도 느리다. <- 추후 https://nordvpn.com/ko/blog/tcp-udp-comparison/ 읽어보자.
		- HTML 변경 시 서블릿을 재컴파일해야하는 단점이 있음

	서블릿 동작 방식
		1. 클라이언트 URL 입력 -> HTTP Request가 Servlet Container로 전송
		2. 컨테이너는 HttpServletRequest, HttpServletResponse 객체를 생성
		3. web.xml 기반으로 요청한 URL이 어느 서블릿에 대한 요청인지 찾기
		4. 해당 서블릿에서 service메서드를 호출 후 -> 클라이언트의 GET, POST 여부에 따라 doGet(), doPost()호출
		5. 메서드는 동적 페이지 생성후 -> HttpServletResponse 객체에 응답을 보냄
		6. 응답 후 두 객체 소멸

서블릿 컨테이너
	요청/응답할 수 있게 웹서버와 소켓으로 통신. 대표적으로 톰캣. 
	JSP와 Servlet이 작동하는 환경 제공해줌

JSP(Java Server Page)
	- 서블릿은 자바 소스코드 속에 HTML 코드가 들어가 있는 형태, 
	- JSP는 HTML 코드 속에 자바 소스코드가 들어간 구조( <% 소스코드 %> )


서블릿의 종속성 제거에 대해
	Spring MVC는 HttpServletRequest와 HttpServletResponse를 직접 사용하지 않고도 컨트롤러를 구현할 수 있다.
	개발자가 직접 HTTP 요청/응답의 세부 사항을 처리하지 않고 웹 애플리케이션을 구축할 수 있어져서 편리

	1. 데이터 바인딩 및 자동 매핑
		요청 파라미터를 자동으로 메서드 파라미터로 바인딩할 수 있다. 
		HttpServletRequest를 직접 사용하지 않고 요청 데이터를 쉽게 처리할 수 있다. 
		
		- 요청 파라미터 바인딩 @RequestParam 	
			@GetMapping("/greet")
			public String greet(@RequestParam String name) {
				return "Hello, " + name;
			}

		- 객체 바인딩 @ModelAttribute
			@PostMapping("/user")
			public String createUser(@ModelAttribute User user) {
				// User 객체에 요청 파라미터가 바인딩됨
				return "userView";
			}

	2. 핸들러 메서드 반환값
		반환값은 뷰 이름일 수 있으며, 적절한 뷰를 선택하고 렌더링한다.
		- 문자열 반환
			여기 공부 중이었지 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!@_@	






Spring MVC 모델에 대해서 공부해보자.



잠깐 복습하고 가기.

@RequestParam이란? 
	스프링에서는 HTTP 요청 파라미터 값을 편리하게 사용하게 해준다.
		- HTTP 요청 파라미터의 이름으로 바인딩하여 그 값을 변수에 저장	
			@RequestParam("username") String memberName, 
			@RequestParam("data") String[] datas 배열로, 
			@RequestParam("data") ArrayList<String> datas 리스트로
		- 이름이 변수 이름과 같으면 value 생략 가능		
			@RequestParam String username,
		- 단순 타입(String, int, integer 등)이면 생략 가능	
			String username

	파라미터 필수 여부 - required 옵션
		- true일 경우는 필수, false일 경우는 필수가 아닌 것(요청 파라미터에 값이 없으면 null이 저장)으로 설정 가능하다.

	default 값 적용 - defaultBalue 설정
		@RequestParam(required = true, defaultValue = "guest") String username,
		@RequestParam(required = false, defaultValue = "-1") int age
		- null 대신 -1이 저장되게 되어 int를 사용할 수 있다.

	파라미터를 Map으로 조회하기 - 동일한 이름의 파라미터 값이 2개 이상일 경우 사용
		@RequestParam Map<String, Object> paramMap


Model은 하는 역할이 뭐지?
	사용자에게 응답할 데이터를 포함시킬 방법들이 정의되어 있음. 즉, 사용자에게 응답 데이터를 보내준다. 
		@GetMapping("/b") 
		public String b(int num1, int num2, Model model) {
			int result = num1+num2;
			model.addAttribute("result", result);  //"result"라는 이름으로 result 변수를 모델에 추가한다.
			return "c";
		}

	- 컨트롤러에서 처리한 데이터를 Model 객체에 담아 뷰로 전달할 때 사용. 
	- 뷰에서 데이터 접근 : JSP에서 ${result}로 모델에 담긴 값을 접근할 수 있다.









Redirect와 Forward
	- 리다이렉트 : 클라이언트의 요청에 의해 서버의 DB에 변화가 생기는 작업에 사용된다. 
		ex. DB의 유저테이블을 변경하는 회원가입, 요청을 중복해서 보내는 것을 방지할 수 있다.
	- 포워드 : 특정 URL에 대해 외부에 공개되지 말아야 하는 부분을 가리는데 사용하거나 조회를 위해 사용된다. 


생성자를 자동 생성해주는 어노테이션 종류에 대해서 공부해보자.
	@AllArgsConstructor
		모든 필드 값을 파라미터로 받는 생성자를 생성
	@RequiredArgsConstructor
		final이나 @NonNull으로 선언된 필드만을 파라미터로 받는 생성자를 생성
	@NoArgsConstructor
		파라미터가 없는 기본 생성자를 만들어준다.


의존성주입에 대해서 공부하고 테스트 클래스를 사용해서 확인해보자. 
	스프링 프레임워크에서 의존성주입DI는 객체 간의 의존성을 외부에서 주입해주는 방식이다.
	대표적으로 생성자주입과 세터주입이 있다.

	@Component 
	public class Chef {}
	셰프 클래스를 각각 주입해보자!!


	1. 생성자 주입
	객체가 생성될 때 의존성을 주입하는 방식이다. 

		@RequiredArgsConstructor
		@Getter
		@Component
		public class Hotel {

			@NonNull
			private Chef chef;
			int data;
		}

	2. 세터 주입
	객체가 생성된 후, 세터 메서드를 통해 의존성을 주입하는 방식이다.

		@Component
		@Data
		public class Restaurant {
			@Autowired
			private Chef chef;
		}

	-> 테스트 코드로 확인
		@SpringBootTest
		public class HotelTests {
			@Autowired
			private Hotel hotel;
			@Autowired
			private Restaurant restaurant;

			@Test //하나의 단위가 된다.
			public void test1(){
				assertNoNull(hotel.getChef());
			}
			@Test
			public void test2(){
				assertNoNull(restaurant.getChef());
			}
		}

궁금한점?
	여기서 기본생성자를 만들어주는 @NoArgsConstructor를 사용할 것 같았다. 
	@RequiredArgsConstructor는 final이나 @NonNull으로 선언된 필드만을 파라미터로 받는 생성자를 생성한다고 했기 때문이다.
	하지만 에러를 직면했다. 문제가 뭐였을까?

	> 문제1. RequiredArgsConstructor와 AllArgsConstructor 애너테이션을 함께 사용하면 중복이 된다고 한다. 
		-> Required만 써도 충분하다. 
	> 문제2. @NonNull은 생성자 주입시 해당 필드가 null 일 수 없다는 것을 보장한다. 
		-> 이 경우 NoArgsConstrucotr는 필요하지 않다.
	> 문제3. 스프링에 의해 Hotel 객체가 생성될 때, Chef 타입의 객체를 의존성주입으로 넘겨주기 위함이다.
		-> 기본생성자를 만들면 객체 생성 후 별도로 의존성을 주입해야하게 된다. 그럼 약한 의존성을 위해 의존성주입을 사용하는 이유가 없다. 
		또는 스프링은 어떤 생성자를 선택해야할지 모르기 때문에 기본생성자를 만들어주지 않는 것이다.


@AllArgsConstructor 사용시 주의
	자동으로 생성자가 만들어진다. 
	필드의 위치가 바뀌게 되면 생성되는 파라미터의 순서도 바뀌게 되는데, 
	기존 소스에서 "인스턴스 생성 로직"을 확인하지 않고 그대로 사용하고 있으면, 
	두 필드가 동일타입의 경우 에러없이 인자가 뒤바뀌는 문제를 야기할 수 있다.

	ex.
	@AllArgsConstructor
	public class User {
		private String nickName;
		private String name;
	} 를

	@AllArgsConstructor
	public class User {
		private String name;
		private String nickName;
	} 로 순서 바꿈

	인스턴스 생성은 그대로 
	User user = new User("UmJi", "엄지");

	생성자는
	public User(String name, String nickName){...}
	//name:UmJi, nickName:엄지 로 에러없이 되어버린다. 


@RequiredArgsConstrutor 사용시 주의
	@Data에 @RequiredArgsConstrutor 이 포함되어 있기 때문에 같이 주의해야 한다.
	또한 @Setter를 지원하기 때문에 변경 기능을 제공하지 않기 위한 필드의 안전성을 보장받기 힘들고, JPA에서의 양방향 관계시 @ToString의 순환 참조 문제가 발생할 수 있다. 
	-> 이를 위한 차선택으로 @Builder 를 사용하는 것
	인스턴스를 생성할 때 명시적이게 된다.

	ex.
	public class User {
		private String name;
		private String nickName;

		@Builder
		public User(String name, String nickName) {
			this.name = name;
			this.nickName = nickName;
		}

		User user = User.builder()
				.name("엄지")
				.nickName("UmJi")
				.build();
	}